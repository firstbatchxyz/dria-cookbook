[
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "Despite living on a low income and managing a chronic Condition A, 58-year-old Michael found solace and exceptional care at Provider C, whose compassionate staff significantly enhanced his healthcare experience, leading to his very satisfied survey completion in 34 minutes, a stark reminder of the value of kindness in health services as AI engineers, like those using Dria, strive to replicate such nuanced human interactions in synthetic data environments.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "Margaret, a 60-year-old low-income woman managing Condition A, maintains a neutral stance toward Provider B's services due to lengthy wait times, yet diligently completed a detailed 46-minute satisfaction survey and continues her healthcare journey with scheduled follow-up appointments despite the $3,555 treatment cost weighing heavily on her budget.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "A wealthy 57-year-old male patient named James expresses contentment with Provider A's exceptional staff demeanor during his Condition B treatment, taking time to provide detailed feedback in his survey despite having no scheduled follow-up care.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "GeneratedName1, a 79-year-old non-binary individual with a high income, is very dissatisfied with Provider C due to the staff's rude behavior, despite their recent treatment for Condition D costing $6,317. They spent 42 minutes completing a satisfaction survey and have a follow-up appointment scheduled, but their frustration with the healthcare service remains palpable.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "A 41-year-old male named Ethan, with a medium income level, is currently dissatisfied with the healthcare services offered by Provider B due to poor staff behavior; despite regular follow-ups for his chronic Condition B and having paid $297 for treatment, Ethan's frustration grew over time, prompting him to provide detailed feedback through a satisfaction survey, taking a mere 8 minutes to document his grievances, as he hopes for improved care standards in future interactions.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "A 35-year-old non-binary individual with medium income expresses deep satisfaction with Provider B's exceptional handling of their Condition D treatment, having spent nearly an hour providing detailed feedback on their $1,416 medical experience, though they currently have no follow-up appointments scheduled.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "A 48-year-old non-binary individual, Alex, is very satisfied with the healthcare service provided by Provider A, particularly due to the compassionate and thorough care received for Condition C, a rare disorder that has significantly improved with the $1976 treatment, and is looking forward to their follow-up appointment while contributing valuable feedback to Dria, the synthetic data infrastructure that is revolutionizing healthcare research.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "A 45-year-old non-binary individual named Jordan, struggling with Condition B and limited financial means, expresses deep frustration with Provider B's subpar quality of care through a meticulously detailed 53-minute survey, while facing the additional burden of a $3,182 medical bill and no scheduled follow-up care.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "At 65, Robert Green, a low-income male patient of Provider A, grapples with his ongoing struggle with Condition A, finding himself increasingly dissatisfied with the healthcare system after a costly $4788 treatment, but remains hopeful as he navigates his condition with the support of a scheduled follow-up, spurred by his persistent quest for better care in a world evolving with synthetic data engineering through initiatives like Dria.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: What is Dria? - Dria Docs\n\nURL Source: https://docs.dria.co/\n\nMarkdown Content:\nDria is the only synthetic data infrastructure that you can balance data quality, diversity, and complexity all together in a single interface.\n\n*   A framework for creating, managing, and orchestrating synthetic data pipelines.\n*   A multi-agent network that can synthesize data from web and siloed sources.\n\n### Why use Dria?[\u00b6](https://docs.dria.co/#why-use-dria \"Permanent link\")\n\nDria provides the scalable and versatile tools you need to accelerate your AI development with high-quality, diverse synthetic datasets.\n\n**No GPUs needed**:\n\nAs a network, Dria allows you to directly offload your compute needs to the network, leveraging massive parallelization. This means faster processing and more efficient resource utilization without the need for personal GPU infrastructure.\n\n**Model Rich**:\n\nDria provides flexible tools to write custom pipelines and scale them through the network. You can design complex data generation workflows tailored to your specific needs, all without requiring your own GPUs.\n\n\\*\\*Grounding, Diversity, \\*\\*:\n\nDria network web search, and custom tooling for APIs enabling grounding of generated data\n\n**Searching for Grounding**:\n\nDria enables you to create pipelines in which the AI can search for grounding in the web or siloed APIs, allowing you to create diverse synthetic data with real-life distribution.\n\n[Get Started](https://docs.dria.co/installation/)\n\n[Run a Node](https://docs.dria.co/node/)\n\n* * *\n\nDria SDK is released under the [MIT License](https://opensource.org/licenses/MIT).\n",
    "url": "https://docs.dria.co"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Installation - Dria Docs\n\nURL Source: https://docs.dria.co/installation\n\nMarkdown Content:\nRequirements and Setup[\u00b6](https://docs.dria.co/installation#requirements-and-setup \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nDria SDK is compatible with Python 3.10 or higher. Start by creating a new conda env:\n\n```\n[](https://docs.dria.co/installation#__codelineno-0-1)conda create -n dria python=3.10\n[](https://docs.dria.co/installation#__codelineno-0-2)conda activate dria\n```\n\nThen to install the SDK, simply run the following command in your terminal:\n\n_If you are having problems with installing coincurve, try installing coincurve separately_ :\n\n```\n[](https://docs.dria.co/installation#__codelineno-2-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-2-2)\n[](https://docs.dria.co/installation#__codelineno-2-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-2-4)\n[](https://docs.dria.co/installation#__codelineno-2-5)pip3 install coincurve\n```\n\nand install dria package by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-3-1)pip install --upgrade dria\n```\n\nIf issues persist, see [section](https://docs.dria.co/installation#gcc-related-issues)\n\nImportant Notes[\u00b6](https://docs.dria.co/installation#important-notes \"Permanent link\")\n--------------------------------------------------------------------------------------\n\n*   **Network Status**: The Dria Network is currently in **alpha** stage. Access is managed through RPCs to ensure controlled access and trusted task execution.\n    \n*   **Cost**: At present, there is no cost associated with generating data using Dria.\n    \n*   **Contributing**: You can contribute to the Dria ecosystem by running a [node](https://dria.co/join) in the Dria network. This helps scale the network and improve throughput.\n    \n\nNext Steps[\u00b6](https://docs.dria.co/installation#next-steps \"Permanent link\")\n----------------------------------------------------------------------------\n\nOnce you have your RPC token, you're ready to start using the Dria SDK. Check out the examples from cookbook (e.g. [Patient Dialogues](https://docs.dria.co/cookbook/patient_dialogues/)) or see [pipelines](https://docs.dria.co/how-to/pipelines/) to learn how to create your first synthetic data pipeline.\n\nIn some python versions on MacOS\n\n```\n[](https://docs.dria.co/installation#__codelineno-4-1)tkinter is no longer included with this formula, but it is available separately:\n[](https://docs.dria.co/installation#__codelineno-4-2)brew install python-tk@<version>\n```\n\nand as a result, you may encounter the warning\n\n```\n[](https://docs.dria.co/installation#__codelineno-5-1)ModuleNotFoundError: No module named \u2018_tkinter\u2019\n```\n\nyou can see the error.\n\nIn these cases, you should install python installation as the system recommends.\n\n```\n[](https://docs.dria.co/installation#__codelineno-6-1)brew install python-tk@<version>\n```\n\nas follows.\n\nIf you are having problems with `coincurve` Try installing `brew` and `xcode tools`\n\nInstall brew by:\n\n```\n[](https://docs.dria.co/installation#__codelineno-8-1)/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nand run:\n\n```\n[](https://docs.dria.co/installation#__codelineno-9-1)brew install automake libtool pkg-config\n```\n\nre create env\n\n```\n[](https://docs.dria.co/installation#__codelineno-10-1)conda create -n dria_new python=3.10\n[](https://docs.dria.co/installation#__codelineno-10-2)conda activate dria_new\n```\n\nSeperately install coincurve:\n\n```\n[](https://docs.dria.co/installation#__codelineno-11-1)pip3 install --upgrade pip3\n[](https://docs.dria.co/installation#__codelineno-11-2)\n[](https://docs.dria.co/installation#__codelineno-11-3)pip3 install wheel\n[](https://docs.dria.co/installation#__codelineno-11-4)\n[](https://docs.dria.co/installation#__codelineno-11-5)pip3 install coincurve\n```\n\nInstall dria:\n\nIf you are still facing issues, please reach out to us at [Discord](https://discord.gg/dria) for further assistance. \\`\\`\\`\n",
    "url": "https://docs.dria.co/installation"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Run a Node (Optional) - Dria Docs\n\nURL Source: https://docs.dria.co/node\n\nMarkdown Content:\nRun a Node (Optional) - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/node#run-a-node)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nRun a Node (Optional)\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [ ]  Run a Node (Optional) [Run a Node (Optional)](https://docs.dria.co/)\n        \n        Table of contents\n        \n        *   [Quick Start](https://docs.dria.co/node#quick-start)\n        *   [Notes](https://docs.dria.co/node#notes)\n        *   [Post-Setup](https://docs.dria.co/node#post-setup)\n        \n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nTable of contents\n\n*   [Quick Start](https://docs.dria.co/node#quick-start)\n*   [Notes](https://docs.dria.co/node#notes)\n*   [Post-Setup](https://docs.dria.co/node#post-setup)\n\nRun a Node[\u00b6](https://docs.dria.co/node#run-a-node \"Permanent link\")\n====================================================================\n\n[Dria](https://dria.co/) is a decentralized network for AI agent collaboration, built by [FirstBatch](https://firstbatch.xyz/).\n\n### Quick Start[\u00b6](https://docs.dria.co/node#quick-start \"Permanent link\")\n\n*   No wallet activity required\n*   Setup takes only a few minutes\n\n**Requirements**\n\nCheck node requirements [here](https://github.com/firstbatchxyz/dkn-compute-node/blob/master/docs/NODE_GUIDE.md).\n\n**Setup Steps**\n\n1.  Download launcher from [Dria website](https://dria.co/join)\n2.  Unzip the node file\n3.  Run the launcher:\n    \n    ```\n    [](https://docs.dria.co/node#__codelineno-0-1)./dkn-compute-launcher\n    ```\n    \n4.  Enter your ETH wallet private key\n5.  Choose a model to serve\n6.  (Optional) Enter API keys for additional tools\n\n### Notes[\u00b6](https://docs.dria.co/node#notes \"Permanent link\")\n\n*   MacOS users may need to bypass security warnings\n*   Different OS might have slight variations in the process\n\n### Post-Setup[\u00b6](https://docs.dria.co/node#post-setup \"Permanent link\")\n\n*   Fill out [this form](https://dria.ai/keeper) for Discord role\n*   Star our [GitHub repo](https://dria.co/repo)\n*   Follow [@driaforall](https://dria.ai/x) and [@FirstBatchAI](https://firstbat.ch/x) on Twitter/X\n\n\u26a0\ufe0f Follow official guides for best results.\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/node"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Quickstart - Dria Docs\n\nURL Source: https://docs.dria.co/quickstart\n\nMarkdown Content:\nQuick Start[\u00b6](https://docs.dria.co/quickstart#quick-start \"Permanent link\")\n----------------------------------------------------------------------------\n\n> In order to follow this guide, you need to [install](https://docs.dria.co/installation/) Dria SDK.\n\nUsing Dria is simple:\n\n*   Create a dataset\n*   Attach a dataset generator\n*   Define your instructions (inputs)\n*   Define prompts\n*   Run!\n\n```\n[](https://docs.dria.co/quickstart#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/quickstart#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/quickstart#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/quickstart#__codelineno-0-4)\n[](https://docs.dria.co/quickstart#__codelineno-0-5)# Define output schema\n[](https://docs.dria.co/quickstart#__codelineno-0-6)class Tweet(BaseModel):\n[](https://docs.dria.co/quickstart#__codelineno-0-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/quickstart#__codelineno-0-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/quickstart#__codelineno-0-9)\n[](https://docs.dria.co/quickstart#__codelineno-0-10)# Create dataset\n[](https://docs.dria.co/quickstart#__codelineno-0-11)dataset = DriaDataset(name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-12)\n[](https://docs.dria.co/quickstart#__codelineno-0-13)# Create instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-14)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/quickstart#__codelineno-0-15)\n[](https://docs.dria.co/quickstart#__codelineno-0-16)# Prompt to apply to your instructions\n[](https://docs.dria.co/quickstart#__codelineno-0-17)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/quickstart#__codelineno-0-18)\n[](https://docs.dria.co/quickstart#__codelineno-0-19)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/quickstart#__codelineno-0-20)\n[](https://docs.dria.co/quickstart#__codelineno-0-21)asyncio.run(\n[](https://docs.dria.co/quickstart#__codelineno-0-22)    generator.generate(\n[](https://docs.dria.co/quickstart#__codelineno-0-23)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/quickstart#__codelineno-0-24)    )\n[](https://docs.dria.co/quickstart#__codelineno-0-25))\n[](https://docs.dria.co/quickstart#__codelineno-0-26)\n[](https://docs.dria.co/quickstart#__codelineno-0-27)dataset.to_pandas()\n[](https://docs.dria.co/quickstart#__codelineno-0-28)#                          topic                                              tweet\n[](https://docs.dria.co/quickstart#__codelineno-0-29)# 0                 BadBadNotGood  \ud83c\udfb6 Thrilled to have discovered #BadBadNotGood! ...\n[](https://docs.dria.co/quickstart#__codelineno-0-30)# 1  Decentralized Synthetic Data  Exploring the future of #AI with decentralized...\n```\n\nAnd that's it! This script will run your instructions on models of your choice, execute them on a network of LLMs, and store them on a local database.\n\n* * *\n\n**Note**: Network capacity and data generation volumes are limited during the current phase of Dria.\n",
    "url": "https://docs.dria.co/quickstart"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Search Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/search\n\nMarkdown Content:\nI'll create a markdown documentation file for the SearchWeb singleton implementation you provided.\n\nSearchWeb[\u00b6](https://docs.dria.co/factory/search#searchweb \"Permanent link\")\n----------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/search#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSearchWeb is a singleton template that performs web searches and returns structured results. It allows users to search the web with specific queries, language preferences, and control over the number of results returned. Each search result includes the original query, link, snippet, and title of the found web pages.\n\nInputs[\u00b6](https://docs.dria.co/factory/search#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query to search for |\n| lang | str | Language to search in (defaults to \"en\") |\n| n\\_results | int | Number of results to return (range: 1-25, default: 5) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/search#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| query | str | Query used for search |\n| link | str | Link of the search result |\n| snippet | str | Snippet of the search result |\n| title | str | Title of the search result |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/search#usage \"Permanent link\")\n\nSearchWeb instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator\n[](https://docs.dria.co/factory/search#__codelineno-0-2)from dria.factory.search import SearchWeb\n[](https://docs.dria.co/factory/search#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/search#__codelineno-0-4)\n[](https://docs.dria.co/factory/search#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/search#__codelineno-0-6)    name=\"searches\",\n[](https://docs.dria.co/factory/search#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/search#__codelineno-0-8)    schema=SearchWeb.OutputSchema,\n[](https://docs.dria.co/factory/search#__codelineno-0-9))\n[](https://docs.dria.co/factory/search#__codelineno-0-10)\n[](https://docs.dria.co/factory/search#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/search#__codelineno-0-12)\n[](https://docs.dria.co/factory/search#__codelineno-0-13)\n[](https://docs.dria.co/factory/search#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/search#__codelineno-0-15)    {\"query\": \"Istanbul'daki en iyi kebap\u00e7\u0131lar\", \"lang\": \"tr\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-16)    {\"query\": \"Best kebap places in Istanbul\", \"lang\": \"en\", \"n_results\": 5},\n[](https://docs.dria.co/factory/search#__codelineno-0-17)]\n[](https://docs.dria.co/factory/search#__codelineno-0-18)\n[](https://docs.dria.co/factory/search#__codelineno-0-19)asyncio.run(\n[](https://docs.dria.co/factory/search#__codelineno-0-20)    generator.generate(\n[](https://docs.dria.co/factory/search#__codelineno-0-21)        instructions=instructions,\n[](https://docs.dria.co/factory/search#__codelineno-0-22)        singletons=SearchWeb,\n[](https://docs.dria.co/factory/search#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/search#__codelineno-0-24))\n```\n\nExpected output:\n\n```\n[](https://docs.dria.co/factory/search#__codelineno-1-1)[\n[](https://docs.dria.co/factory/search#__codelineno-1-2){\n[](https://docs.dria.co/factory/search#__codelineno-1-3)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-4)\"link\":\"yemek.com/en-iyi-kebapcilar/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-5)\"snippet\":\"Lakin \u0130stanbul'daki en iyi kebap\u00e7\u0131lar listemizde yer alan kebaplar\u0131n da \\\"Ah bu kebab\u0131 Adana'da yemek vard\u0131!\\\" dedirtmeyece\u011finin de s\u00f6z\u00fcn\u00fc verebiliriz. S\u00f6z\u00fcn k\u0131sas\u0131, can\u0131n\u0131z her kebap yemek istedi\u011finde g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla, b\u00fcy\u00fck bir i\u015ftahla gidebilece\u011finiz \u0130stanbul'daki en iyi kebap\u00e7\u0131lar kar\u015f\u0131n\u0131zda!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-6)\"title\":\"\u0130stanbul'da Kebap Yiyebilece\u011finiz En \u0130yi 10 Mekan - Yemek.com\"\n[](https://docs.dria.co/factory/search#__codelineno-1-7)},\n[](https://docs.dria.co/factory/search#__codelineno-1-8){\n[](https://docs.dria.co/factory/search#__codelineno-1-9)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-10)\"link\":\"onedio.com/haber/kokusuyla-bile-sizi-mest-etmeye-yetecek-istanbul-daki-en-iyi-18-kebap-mekani-1011496\",\n[](https://docs.dria.co/factory/search#__codelineno-1-11)\"snippet\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap Mekan\u0131 ... Avrupa Yakas\u0131'ndaki kebap\u00e7\u0131lar ise modern sunumlar\u0131 ve geni\u015f men\u00fc se\u00e7enekleriyle konuklar\u0131na kap\u0131lar\u0131n\u0131 a\u00e7\u0131yor. Haliyle \u0130stanbul'un her iki yakas\u0131 da kebap severler i\u00e7in adeta bir cennete d\u00f6n\u00fc\u015f\u00fcyor. Peki, \u0130stanbul'da kebap nerede yenir?\",\n[](https://docs.dria.co/factory/search#__codelineno-1-12)\"title\":\"Kokusuyla Bile Sizi Mest Etmeye Yetecek! \u0130stanbul'daki En \u0130yi 23 Kebap ...\"\n[](https://docs.dria.co/factory/search#__codelineno-1-13)},\n[](https://docs.dria.co/factory/search#__codelineno-1-14){\n[](https://docs.dria.co/factory/search#__codelineno-1-15)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-16)\"link\":\"blog.obilet.com/istanbulun-en-iyi-kebapcilari/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-17)\"snippet\":\"Gaziantep mutfa\u011f\u0131n\u0131n en lezzetli mezelerini, kebaplar\u0131n\u0131 tadabilece\u011finiz mekanlardan biri de \u00c7anak Kebap & Katmer. \u0130stanbul'daki en iyi kebap\u00e7\u0131lardan olan \u00c7anak Kebap & Katmer'e giderseniz mezelerden zeytin piyaz\u0131, ac\u0131l\u0131 peynir ezmesini, kebap olarak ise mekan\u0131n spesiyali olan \u00c7anak Ac\u0131l\u0131 Kebab\u0131 tatman\u0131z\u0131 tavsiye ederim.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-18)\"title\":\"\u0130stanbul'daki En \u0130yi 14 Kebap\u00e7\u0131 - \u0130stanbul Lezzet Rehberi - obilet\"\n[](https://docs.dria.co/factory/search#__codelineno-1-19)},\n[](https://docs.dria.co/factory/search#__codelineno-1-20){\n[](https://docs.dria.co/factory/search#__codelineno-1-21)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-22)\"link\":\"gezilinki.com/istanbulun-en-iyi-kebapcilari-istanbulun-en-basarili-10-kebapcisi/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-23)\"snippet\":\"T\u00fcrk ve Orta Do\u011fu mutfa\u011f\u0131n\u0131n \u0130stanbul'daki en eski temsilcilerinden biri olan mekanda onlarca kebap \u00e7e\u015fidi bulabilirsiniz. Adres: Orman Caddesi No: 8, Florya, \u0130stanbul. 1924 \u0130stanbul - Beyo\u011flu. ... Emin\u00f6n\u00fc'nde bulunan bu mekan \u0130stanbul'un en iyi kebap\u00e7\u0131lar ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-24)\"title\":\"\u0130stanbul'un En \u0130yi Kebap\u00e7\u0131lar\u0131 - \u0130stanbul'un En ... - GeziLinki\"\n[](https://docs.dria.co/factory/search#__codelineno-1-25)},\n[](https://docs.dria.co/factory/search#__codelineno-1-26){\n[](https://docs.dria.co/factory/search#__codelineno-1-27)\"query\":\"Istanbul'daki en iyi kebap\u00e7\u0131lar\",\n[](https://docs.dria.co/factory/search#__codelineno-1-28)\"link\":\"www.yasemin.com/yasam/haber/2982424-istanbulda-kebap-nerede-yenir-en-iyi-kebapcilarin-adresleri-2022\",\n[](https://docs.dria.co/factory/search#__codelineno-1-29)\"snippet\":\"ADRES: Koca Mustafa Pa\u015fa M. G\u00fcm\u00fc\u015fy\u00fcz\u00fck S. No: 5/A Samatya / Fatih / \u0130stanbul; HARB\u0130 ADANA OCAKBA\u015eI Ortak\u00f6y'de yer alan Harbi Adana Ocakba\u015f\u0131, kebap yemek isteyenlerin en s\u0131k gitti\u011fi yerler aras\u0131nda yer almaktad\u0131r.Kebaplar\u0131nda kulland\u0131klar\u0131 et se\u00e7imi ve yan\u0131nda servis edilen bir\u00e7ok alternatifle Harbi Adana Ocakba\u015f\u0131 Vedat Milor'dan tam not almay\u0131 ba\u015farm\u0131\u015ft\u0131r.\",\n[](https://docs.dria.co/factory/search#__codelineno-1-30)\"title\":\"\u0130stanbul'da kebap nerede yenir? En iyi kebap\u00e7\u0131lar\u0131n adresleri 2022\"\n[](https://docs.dria.co/factory/search#__codelineno-1-31)},\n[](https://docs.dria.co/factory/search#__codelineno-1-32){\n[](https://docs.dria.co/factory/search#__codelineno-1-33)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-34)\"link\":\"yummyistanbul.com/kebab-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-35)\"snippet\":\"There are at least 110 different kebabs only in Turkey, and each one has its unique taste. Almost every city in Turkey has its own style of k\u00f6fte and kebab.. You may find yourself stumped when it comes to choosing a kebab from dozens of different kebabs, so having a peek at our blog article on the popular types of Turkish kebabs might be useful: 20 Best & Most Famous Turkish Kebabs /w Photos\",\n[](https://docs.dria.co/factory/search#__codelineno-1-36)\"title\":\"Best Kebab in Istanbul: Top 12 Kebab Restaurants Right Now\"\n[](https://docs.dria.co/factory/search#__codelineno-1-37)},\n[](https://docs.dria.co/factory/search#__codelineno-1-38){\n[](https://docs.dria.co/factory/search#__codelineno-1-39)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-40)\"link\":\"istanbulclues.com/best-kebab-restaurants-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-41)\"snippet\":\"Best Turkish Kebab Restaurants in Istanbul 2024. The best Turkish kebab restaurants in Istanbul are mostly found in historical districts. Most of the famous kebab restaurants are located in Fatih, which covers Sultanahmet and its surroundings. On the other hand, there are good restaurants in Beyoglu (aka Taksim) and on the shores of the Bosphorus.. The top 10 kebab restaurants in this article ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-42)\"title\":\"12 Best TURKISH KEBAB Restaurants in Istanbul (2024)\"\n[](https://docs.dria.co/factory/search#__codelineno-1-43)},\n[](https://docs.dria.co/factory/search#__codelineno-1-44){\n[](https://docs.dria.co/factory/search#__codelineno-1-45)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-46)\"link\":\"yummyistanbul.com/best-doner-kebab-in-istanbul/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-47)\"snippet\":\"One of the best doner kebab in Istanbul is also served up here and it is very close to Sultanahmet hotels district. If you're staying at a hotel near Eminonu, or Sultanahmet your location is very accessible and should be reachable within 20 minutes!\",\n[](https://docs.dria.co/factory/search#__codelineno-1-48)\"title\":\"8 Places With The Absolute Best Doner Kebab In Istanbul\"\n[](https://docs.dria.co/factory/search#__codelineno-1-49)},\n[](https://docs.dria.co/factory/search#__codelineno-1-50){\n[](https://docs.dria.co/factory/search#__codelineno-1-51)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-52)\"link\":\"turkeythings.com/istanbul-kebab-restaurants/\",\n[](https://docs.dria.co/factory/search#__codelineno-1-53)\"snippet\":\"1 - Bayramo\u011flu D\u00f6ner Kebab. Located on the Asian side, Bayramo\u011flu D\u00f6ner is an affordable restaurant that exclusively serves d\u00f6ners. It is unquestionably the premier d\u00f6ner kebab spot in Istanbul, with visitors going as far as taking a road trip to queue for a table or a takeaway sandwich.Despite its lack of sophistication, local celebrities and travelers frequently choose to dine there ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-54)\"title\":\"11 Best Kebab Restaurants in Istanbul in 2024 - Turkey Things\"\n[](https://docs.dria.co/factory/search#__codelineno-1-55)},\n[](https://docs.dria.co/factory/search#__codelineno-1-56){\n[](https://docs.dria.co/factory/search#__codelineno-1-57)\"query\":\"Best kebap places in Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-58)\"link\":\"www.yelp.com/search?cflt=kebab&find_loc=Istanbul\",\n[](https://docs.dria.co/factory/search#__codelineno-1-59)\"snippet\":\"Best Kebab near you in Istanbul, Turkey - Fikret Adana Ocakba\u015f\u0131, D\u00fcr\u00fcmzade, Old Ottoman Cafe & Restaurant, \u015eehzade Ca\u011f Kebap, Ta\u00e7 Mahal Kebap Pide Lahmacun, Ziya Baba, Bah\u00e7e\u015fehir Kebab Evi, Karadeniz Pide Salonu, Abooov Kebap, \u0130skender Ni\u015fanta\u015f\u0131 ... Thi sis the best doner in Istanbul. I have tried many doner places since i used to ...\",\n[](https://docs.dria.co/factory/search#__codelineno-1-60)\"title\":\"THE BEST 10 Kebab in ISTANBUL, TURKEY - Updated 2024 - Yelp\"\n[](https://docs.dria.co/factory/search#__codelineno-1-61)}\n[](https://docs.dria.co/factory/search#__codelineno-1-62)]\n```\n",
    "url": "https://docs.dria.co/factory/search"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Evaluating RAG Systems with Synthetic Data\n\nURL Source: https://docs.dria.co/cookbook/eval\n\nMarkdown Content:\nRetrieval-Augmented Generation systems are powerful tools for building AI-powered question-answering applications. Creating a diverse dataset of question & answer pairs that includes complex queries will help you quickly evaluate your RAG pipeline and generate metrics.\n\nEvaluation is crucial to understanding the performance of your RAG system and identifying areas for improvement. There are multiple parameters to consider when evaluating a RAG system, including but not limited to:\n\n*   Embedding model choice\n*   Retrieval method (BM25, VectorDB, hybrid)\n*   Reranking strategy\n*   Answer generation model\n*   Chunking strategy\n\nSynthetic baseline data can help you evaluate your RAG system's performance across these parameters.\n\nThis guide demonstrates how to evaluate RAG systems using synthetic data, providing a practical approach to testing and improving your implementation.\n\nIf you are in a hurry, you can jump straight to the [code implementation](https://docs.dria.co/cookbook/eval#code).\n\nTable of Contents[\u00b6](https://docs.dria.co/cookbook/eval#table-of-contents \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n*   [Setting up a the RAG pipeline](https://docs.dria.co/cookbook/eval#setup)\n*   [Generating Synthetic Data](https://docs.dria.co/cookbook/eval#generating-synthetic-data)\n*   [Evaluating RAG](https://docs.dria.co/cookbook/eval#evaluation)\n\nSetup[\u00b6](https://docs.dria.co/cookbook/eval#setup \"Permanent link\")\n-------------------------------------------------------------------\n\nBefore getting started, ensure you have Python 3.10 or later installed.\n\nSet up your environment using conda:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-0-1)condacreate-nragpython=3.10condaactivaterag\n```\n\nInstall the required dependencies:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-1-1)pipinstall-URAGatouilleinstructordriadatasets\n```\n\n#### For this cookbook, we'll work with HuggingFace [Docs](https://huggingface.co/datasets/m-ric/huggingface_doc) as our RAG dataset.[\u00b6](https://docs.dria.co/cookbook/eval#for-this-cookbook-well-work-with-huggingface-docs-as-our-rag-dataset \"Permanent link\")\n\n### RAG Implementation[\u00b6](https://docs.dria.co/cookbook/eval#rag-implementation \"Permanent link\")\n\nRAG is implemented in the `RAG` class using [RAGatouille](https://github.com/AnswerDotAI/RAGatouille) as the backbone for retrieval, a library focuses on making ColBERT simple to use for developers.\n\nWe'll use the `instructor` library to interact with OpenAI's API for chat completions for structured outputs.\n\nCode taken from Instructor's [cookbook](https://python.useinstructor.com/examples/exact_citations/#validation-method-validate_sources). Pydantic classes structures the responses returned from `OpenAI` API.\n\nTo implement the RAG pipeline, we'll use the `RAG` class:\n\n#### The `RAG` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-rag-class \"Permanent link\")\n\n*   `rag`: RAGPretrainedModel for ColBERT based retrieval.\n*   `client`: Instructor client to interact with OpenAI's API.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-2)from ragatouille import RAGPretrainedModel\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-5)class RAG:\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-6)    def __init__(self, chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-7)        self.rag = RAGPretrainedModel.from_pretrained(\"colbert-ir/colbertv2.0\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-8)        self.index_path = self.rag.index(index_name=\"my_index\", collection=chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-2-9)        self.client = instructor.from_openai(OpenAI())\n```\n\nNow we need `search` and `answer` methods to complete RAG pipeline.\n\n*   `search`: Retrieve relevant documents based on the query.\n*   `answer`: Generate a response using the retrieved documents.\n\nWe'll use `QuestionAnswer` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-1)    def search(self, question: str, top_k=3) -> Union[List[List[str]], List[str]]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-2)        res = self.rag.search(question, k=top_k)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-3)        return [r[\"content\"] for r in res]\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-5)    def answer(self, question: str) -> QuestionAnswer:\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-6)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-7)        docs = self.search(question)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-8)        context = \"\\n\".join(docs)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-10)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-11)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-12)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-13)            response_model=QuestionAnswer,\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-14)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-15)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-16)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-17)                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-18)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-19)                {\"role\": \"user\", \"content\": f\"{context}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-20)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-21)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-22)            validation_context={\"text_chunk\": context},\n[](https://docs.dria.co/cookbook/eval#__codelineno-3-23)        )\n```\n\nAnd that's it! We have a complete RAG pipeline ready for evaluation.\n\n* * *\n\nGenerating Synthetic Data[\u00b6](https://docs.dria.co/cookbook/eval#generating-synthetic-data \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need a diverse dataset of question-answer pairs based on the document chunks we processed earlier. Our objective is to generate two datasets:\n\n1.  **Questions**: A set of questions based on the document chunks and different personas.\n2.  **Multi-hop Questions**: A set of multi-hop questions that require reasoning across multiple document chunks.\n\n### Generating QA Pairs[\u00b6](https://docs.dria.co/cookbook/eval#generating-qa-pairs \"Permanent link\")\n\nWe'll use the `QAPipeline` [class](https://docs.dria.co/factory/qa/) from `dria.factory` to generate question-answer pairs based on the document chunks.\n\n#### The `QAPipeline` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-qapipeline-class \"Permanent link\")\n\nImport the `QAPipeline` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-4-1)from dria.factory import QAPipeline\n```\n\nWe define our _simulation_ as:\n\n> AI developers and researchers learning Huggingface. Some focus on fine-tuning and post-training, others on RAG systems, retrieval problems, image models, or dataset work.\n\nDescription of simulation determines the backstories for the generated questions.\n\nAlong with it, we specify the persona for the pipeline.\n\n> A researcher that is concise and direct\n\nPersona determines how answers are generated based on the context provided.\n\nWe'll use existing chunks as our context to generate questions.\n\nInstead of using chunks directly, we are merging them as files, and using files as whole to boost pipelines ability to generate coherent questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-1)pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-2)    simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-3)                           \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-4)                           \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-5)    num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-6)    persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-7)    chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-5-8))\n```\n\nWe can now execute the pipeline to generate question-answer pairs.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-1)async def run_qa_pipeline(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-2)    await dria.initialize()\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-3)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-4)    pipeline = QAPipeline(dria).build(\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-5)        simulation_description=\"AI developers and researchers learning Huggingface. \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-6)                               \"Some focus on fine-tuning and post-training, others on RAG systems, \"\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-7)                               \"retrieval problems, image models, or dataset work.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-8)        num_samples=1,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-9)        persona=\"A HuggingFace expert that is concise and direct\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-10)        chunks=file_chunks,\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-11)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-6-13)    return await pipeline.execute(return_output=True)\n```\n\n### Generating Multi-hop Questions[\u00b6](https://docs.dria.co/cookbook/eval#generating-multi-hop-questions \"Permanent link\")\n\nWe'll use the `MultiHopQuestion` [class](https://docs.dria.co/factory/multihopqa/) from `dria.factory` to generate multi-hop questions that require reasoning across multiple document chunks.\n\n#### The `MultiHopQuestion` Class[\u00b6](https://docs.dria.co/cookbook/eval#the-multihopquestion-class \"Permanent link\")\n\nUnlike simple QA pairs, multi-hop questions require reasoning across multiple document chunks. `MultiHopQuestion` class is a Singleton, not a pipeline. It's a single atomic task so we'll use it with our `ParallelSingletonExecutor`.\n\nImport the `MultiHopQuestion` class from `dria.factory`:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-7-1)from dria.factory import MultiHopQuestion\n```\n\nWe'll initialize selected singleton and pass it to the `ParallelSingletonExecutor` for execution.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-1)singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-8-2)executor = ParallelSingletonExecutor(dria, singleton)\n```\n\nWe set the model pools for the executor, publishing tasks to nodes that work with the specified models.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-9-1)executor.set_models([Model.GPT4O, Model.GEMINI_15_FLASH, Model.QWEN2_5_32B_FP16, Model.GEMINI_15_FLASH])\n```\n\nThen load the instructions for the executor. We'll randomly sample 3 chunks from each file to create multi-hop questions.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-10-1)executor.load_instructions([{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)])\n```\n\nHere is the complete code to generate multi-hop questions:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-1)async def run_multihop_tasks(dria: Dria, file_chunks):\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-2)    singleton = MultiHopQuestion()\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-3)    executor = ParallelSingletonExecutor(dria, singleton)\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-4)    executor.set_models(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-5)        [\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-6)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-7)            Model.GEMINI_15_PRO,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-8)            Model.GPT4O,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-9)            Model.ANTHROPIC_SONNET_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-10)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-11)        ]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-12)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-13)    executor.load_instructions(\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-14)        [{\"chunks\": random.sample(file_chunks, 3)} for _ in range(10)]\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-15)    )\n[](https://docs.dria.co/cookbook/eval#__codelineno-11-16)    return await executor.run()\n```\n\nThat's it for generating synthetic data for evaluation.\n\nEvaluation[\u00b6](https://docs.dria.co/cookbook/eval#evaluation \"Permanent link\")\n-----------------------------------------------------------------------------\n\nTo evaluate the RAG pipeline, we need to compare the generated questions and answers with the ground truth.\n\n### Evaluator Class[\u00b6](https://docs.dria.co/cookbook/eval#evaluator-class \"Permanent link\")\n\nThe `Evaluator` class uses the `instructor` library to interact with OpenAI's API for chat completions to evaluate the generated questions.\n\nWe'll use the `EvaluationResult` pydantic model to structure the data for validation and processing.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-1)import instructor\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-3)from openai import OpenAI\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-4)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-5)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-6)class EvaluationResult(BaseModel):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-7)    evaluation: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-8)    reasoning: str = Field(...)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-9)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-10)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-11)class Evaluator:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-12)    def __init__(self):\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-13)        self.client = instructor.from_openai(OpenAI())\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-14)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-15)    def evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-16)        self, question: str, prediction: str, ground_truth: str\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-17)    ) -> EvaluationResult:\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-18)\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-19)        return self.client.chat.completions.create(\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-20)            model=\"gpt-4o\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-21)            temperature=0,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-22)            response_model=EvaluationResult,\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-23)            messages=[\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-24)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-25)                    \"role\": \"system\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-26)                    \"content\": \"You are a world class judge to evaluate predicted answers to given question.\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-27)                },\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-28)                {\"role\": \"user\", \"content\": f\"Question: {question}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-29)                {\"role\": \"user\", \"content\": f\"Prediction: {prediction}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-30)                {\"role\": \"user\", \"content\": f\"Ground truth: {ground_truth}\"},\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-31)            ],\n[](https://docs.dria.co/cookbook/eval#__codelineno-12-32)        )\n```\n\n### Running the Evaluation pipeline[\u00b6](https://docs.dria.co/cookbook/eval#running-the-evaluation-pipeline \"Permanent link\")\n\nWe can now evaluate the generated questions and answers using the `Evaluator` class.\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-1)def main():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-3)    # Load dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-4)    dataset = load_dataset(\"m-ric/huggingface_doc\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-5)    eval_chunks = dataset[\"train\"].select(range(int(0.01 * len(dataset[\"train\"]))))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-6)    eval_chunks = [chunk[\"text\"] for chunk in eval_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-7)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-8)    # Create synthetic evaluation data using %1 of the dataset\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-9)    dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-10)    qa_eval = asyncio.run(run_qa_pipeline(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-11)    multihop_eval = asyncio.run(run_multihop_tasks(dria, eval_chunks))\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-13)    # Initialize RAG\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-14)    all_chunks = dataset[\"train\"]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-15)    all_chunks = [chunk[\"text\"] for chunk in all_chunks]\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-16)    rag = RAG(all_chunks)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-17)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-18)    answers = {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-19)        \"qa\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-20)        \"1-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-21)        \"2-hop\": [],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-22)        \"3-hop\": []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-23)    }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-24)    evaluate = Evaluator()\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-25)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-26)    # Answer QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-27)    for pair in tqdm(qa_eval, desc=\"Answering QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-28)        answer = rag.answer(pair[\"question\"])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-29)        print(\"**** \", answer)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-30)        answers[\"qa\"].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-31)            {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-32)                \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-33)                \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-34)                \"type\": \"simple\",\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-35)                \"question\": pair[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-36)            }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-37)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-38)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-39)    # Answer multi-hop QA data\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-40)    for pair in tqdm(multihop_eval, desc=\"Answering multi-hop QA\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-41)        for hop_type in [\"1-hop\", \"2-hop\", \"3-hop\"]:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-42)            answer = rag.answer(pair[hop_type])\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-43)            answers[hop_type].append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-44)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-45)                    \"prediction\": answer.get_answer(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-46)                    \"answer\": pair[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-47)                    \"type\": hop_type,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-48)                    \"question\": pair[hop_type],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-49)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-50)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-51)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-52)    # Evaluate all answers\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-53)    for k, v in answers.items():\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-54)        evaluated_answers = []\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-55)        for answer in tqdm(v, desc=\"Evaluating answers\"):\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-56)            result = evaluate.evaluate(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-57)                answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-58)                answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-59)                answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-60)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-61)            evaluated_answers.append(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-62)                {\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-63)                    \"question\": answer[\"question\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-64)                    \"answer\": answer[\"answer\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-65)                    \"prediction\": answer[\"prediction\"],\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-66)                    \"evaluation\": result.evaluation.lower(),\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-67)                    \"reasoning\": result.reasoning,\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-68)                }\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-69)            )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-70)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-71)        accuracy = calculate_accuracy(evaluated_answers)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-72)        print(f\"********** {k} accuracy\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-73)        print(f\"Total: {accuracy.total}\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-74)        print(f\"Correct: {accuracy.correct} ({accuracy.correct_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-75)        print(\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-76)            f\"Partially correct: {accuracy.partially_correct} ({accuracy.partially_correct_percentage}%)\"\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-77)        )\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-78)        print(f\"Incorrect: {accuracy.incorrect} ({accuracy.incorrect_percentage}%)\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-79)        print(\"**********\")\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-80)\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-81)        with open(f\"evaluated_answers_{k}.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/eval#__codelineno-13-82)            f.write(json.dumps(evaluated_answers, indent=2))\n```\n\n#### Indexing, synthetic data generation, and evaluation steps took around 15minutes on a A10G.[\u00b6](https://docs.dria.co/cookbook/eval#indexing-synthetic-data-generation-and-evaluation-steps-took-around-15minutes-on-a-a10g \"Permanent link\")\n\nOutputs may vary based on the sampled data and the RAG pipeline implementation. Expected output format:\n\n```\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-1)...\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-2)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:55<00:00,  2.97s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-3)********** qa accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-4)Total: 39\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-5)Correct: 16 (41.02564102564102%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-6)Partially correct: 7 (17.94871794871795%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-7)Incorrect: 9 (23.076923076923077%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-8)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-9)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:36<00:00,  2.05s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-10)********** 1-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-11)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-12)Correct: 8 (44.44444444444444%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-13)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-14)Incorrect: 9 (50.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-15)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-16)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:30<00:00,  1.71s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-17)********** 2-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-18)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-19)Correct: 12 (66.66666666666666%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-20)Partially correct: 0 (0.0%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-21)Incorrect: 6 (33.33333333333333%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-22)**********\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-23)Evaluating answers: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:34<00:00,  1.91s/it]\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-24)********** 3-hop accuracy\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-25)Total: 18\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-26)Correct: 7 (38.88888888888889%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-27)Partially correct: 1 (5.555555555555555%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-28)Incorrect: 10 (55.55555555555556%)\n[](https://docs.dria.co/cookbook/eval#__codelineno-14-29)**********\n```\n\nThere you have it!\n\nA complete guide to evaluating RAG systems with synthetic data. Please note we're using a RAG and synthetic data for demonstration purposes. Different RAG implementations and real-world data may yield different results.\n\nCode[\u00b6](https://docs.dria.co/cookbook/eval#code \"Permanent link\")\n-----------------------------------------------------------------\n\nComplete script for the RAG pipeline can be found in [SDK](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/rag_evaluation) examples.\n",
    "url": "https://docs.dria.co/cookbook/eval"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_retrieval\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::87r42-1735150880148-39315914183f`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_retrieval"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Implementing Nvidia's Preference Data Pipeline with Dria\n\nURL Source: https://docs.dria.co/cookbook/nemotron_qa\n\nMarkdown Content:\nIn this cookbook, we'll implement the [`Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct`](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) data using Dria Network.\n\n#### There are two steps in the Nvidia's example:[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#there-are-two-steps-in-the-nvidias-example \"Permanent link\")\n\n*   _Synthetic Response Generation_: A domain specific input query will be provided by the developer - at which point Llama 3.1 405B Instruct will be leveraged to generate ~150 questions. Then, Llama 3.1 405B Instruct will be used to generated 2 responses for each question.\n*   _Reward Model as a Judge_: Nemotron-4 340B Reward will be used to score the 2 responses per question to be used for further alignment training via NeMo Aligner.\n\nImplementation[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementation \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nOverall structure of the pipeline looks like this:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\n1.  A seed `topic` is used to generate multiple `sub_topics`\n2.  Each `sub_topic` is fed into `question` generation step\n3.  The `questions` are then aggregated and scattered to `answer` generation step.\n4.  The `answers` are then aggregated to produce the dataset.\n\n### Setup[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#setup \"Permanent link\")\n\nTo start with implementation, we'll create a folder structure as follows:\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-1)- nemotron_qa\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-2)    - topics\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-3)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-4)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-5)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-6)    - questions\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-7)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-8)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-9)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-10)    - answers\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-11)        - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-12)        - task.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-13)        - prompt.md\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-14)    - __init__.py\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-0-15)    - pipeline.py\n```\n\nEach directory is for a specific step in the pipeline. The `task.py` in each directory will contain the implementation of the step whereas `prompt.md` will contain the prompt for the step.\n\n### Prompts[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#prompts \"Permanent link\")\n\nFrom Nvidia's cookbook:\n\n_Prompt for the first step: `NemotronSubtopicStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-1)Given a topic, generate a list of {{n_subtopics}} subtopics that are related to the topic.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-2)The topic is: {{topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-3)The list must be without numbers, and without any description of the subtopics. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-1-4)The subtopics should be separated by a comma. There must be no other text than the list.\n```\n\n_Prompt for the second step: `NemotronQuestionStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-1)Given a topic, generate {{n_questions}} questions that could be asked about that topic. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-2)The topic is: {{sub_topic}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-3)The list must be without numbers. \n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-2-4)The questions should be separated by a newline character. There must be no other text than the list.\n```\n\n_Prompt for the third step: `NemotronAnswerStep`_\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-1)Given a question, generate 2 responses that could be given to that question. Your response should be in a list format.\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-2)The question is: {{question}}\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-3)The list must be in the format:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-4)RESPONSE A: Response A text here\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-3-5)RESPONSE B: Response B text here\n```\n\nVariables `{{n_subtopics}}`, `{{topic}}`, `{{n_questions}}`, `{{sub_topic}}`, `{{question}}` will be replaced with the actual values during the execution of the pipeline. Please note that variables are enclosed in double curly braces `{{}}`.\n\n### Understanding the Flow of Data[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data \"Permanent link\")\n\nIt's important to note that prompts for each step has parameters that are passed from the previous step which creates a flow of data. Inputs for a step are defined in the prompt and are passed from the previous step or explicitly set as user input.\n\n```\nflowchart TD\n    A[topic] -->|input| B[NemotronSubtopicStep]\n    A2[n_subtopics] -->|input| B\n    B --> C[sub_topic] -->|input| D[NemotronQuestionStep]\n    C2[n_questions] -->|input| D\n    D --> E[question] -->|input| F[NemotronAnswerStep]\n    F --> G[output]\n```\n\nVariables in prompts define expected input values for the step. The values are passed from the previous step to the next step.\n\n### Implementing the Steps[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-steps \"Permanent link\")\n\nDria pipelines consists of Steps, which are instances of `StepTemplate`. We'll define a `StepTemplate` for each step in the pipeline. Each step must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n#### Implementing the `NemotronSubtopicStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep \"Permanent link\")\n\nLet's first implement the `NemotronSubtopicStep` class. We'll use variables `topic` and `n_subtopics` in the prompt as input parameters for the step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-4-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n```\n\nThe `create_workflow` method will return a `Workflow` object. We'll use `WorkflowBuilder` to create the workflow. The step will have a single `generative_step` in `Workflow` which will generate the subtopics.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-1)class NemotronSubtopicStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-2)    def create_workflow(self, topic: str, n_subtopics: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-4)        builder = WorkflowBuilder(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-8)            id=\"generate_subtopics\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-11)            outputs=[Write.new(\"subtopics\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-15)            Edge(source=\"generate_subtopics\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-18)        builder.set_return_value(\"subtopics\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-5-20)        return builder.build()\n```\n\nIn order to determine how outputs of one step are passed as inputs to the next step, we'll define a `callback` method in the `NemotronSubtopicStep` class. The `callback` method will take the output of the step and return the input for the next step. Since the output of the step is a list of subtopics, step returns a list of `TaskInput` objects for the next step.\n\n`NemotronSubtopicStep` is a `1->N` step, meaning it takes one input and produces multiple outputs. Therefore it's safe to use `step.output[0]` since we'll execute a single task to generate subtopics from a topic.\n\nCreating a list of `TaskInput` objects for the next step results in executing **multiple tasks in parallel for the next step**.\n\nNote that since inputs for next step are `sub_topic` and `n_questions`, we'll create a `TaskInput` object for each subtopic generated in the previous step.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-6-10)        return [TaskInput(**{\"sub_topic\": topic, \"n_questions\": self.params.n_questions}) for topic in step.output[0].result.split(\",\")]\n```\n\n#### Implementing the `NemotronQuestionStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronquestionstep \"Permanent link\")\n\nImplementation of `NemotronQuestionStep` and `NemotronAnswerStep` are similar.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-1)class NemotronQuestionStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-2)    def create_workflow(self, sub_topic: str, n_questions: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-4)        builder = WorkflowBuilder(sub_topic=sub_topic, n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-8)            id=\"generate_questions\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-11)            outputs=[Write.new(\"questions\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-15)            Edge(source=\"generate_questions\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-18)        builder.set_return_value(\"questions\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-7-20)        return builder.build()\n```\n\nCallback for `NemotronQuestionStep` would be different since it's a `N->N` Question step will receive multiple outputs and again distribute multiple inputs for the next step.\n\nIn order to achieve this, callback method will loop through `step.output` values, parse them and create a List of `TaskInput` objects for the next step. Because of how task is prompted, callback splits output by \",\" to obtain the list of questions generated by a single task.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-10)        questions = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-12)            questions.extend(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-13)                [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-14)                    TaskInput(**{\"question\": q})\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-15)                    for q in o.result.split(\"\\n\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-16)                    if q.strip()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-17)                ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-18)            )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-8-19)        return questions\n```\n\n#### Implementing the `NemotronAnswerStep`[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronanswerstep \"Permanent link\")\n\nWe follow a similar approach for `NemotronAnswerStep` as we did for `NemotronQuestionStep`.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-1)class NemotronAnswerStep(StepTemplate):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-2)    def create_workflow(self, question: str) -> Workflow:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-3)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-4)        builder = WorkflowBuilder(question=question)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-5)        builder.set_max_time(50)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-7)        builder.generative_step(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-8)            id=\"generate_answers\",\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-9)            path=get_abs_path(\"prompt.md\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-10)            operator=Operator.GENERATION,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-11)            outputs=[Write.new(\"answers\")],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-12)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-13)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-14)        flow = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-15)            Edge(source=\"generate_answers\", target=\"_end\"),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-16)        ]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-17)        builder.flow(flow)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-18)        builder.set_return_value(\"answers\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-19)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-9-20)        return builder.build()\n```\n\nCallback for `NemotronAnswerStep` would again be different since it's a `1->N` with different parameters. Yet again caused by the prompt, we'll add parsing logic to the callback method to create a list of `TaskInput` objects as our output.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-1)    def callback(self, step: Step) -> List[TaskInput]:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-2)\"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-3)        1 -> N\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-4)        Args:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-5)            step:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-7)        Returns:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-9)        \"\"\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-10)        responses = []\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-11)        for o in step.output:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-12)            resp = o.result\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-13)            question = o.task_input[\"question\"]\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-14)            resp = resp.replace(\"RESPONSE A:\", \"\").replace(\"RESPONSE B:\", \"\")\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-15)            try:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-16)                responses.append(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-17)                    TaskInput(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-18)                        **{\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-19)                            \"question\": question.strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-20)                            \"response_a\": resp.split(\"\\n\\n\")[0].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-21)                            \"response_b\": resp.split(\"\\n\\n\")[1].strip(),\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-22)                        }\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-23)                    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-24)                )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-25)            except:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-26)                pass\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-10-27)        return responses\n```\n\nThat's it! We've created all the steps.\n\n#### Building the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#building-the-pipeline \"Permanent link\")\n\nFinal step for implementing the pipeline is to connect the steps using `PipelineBuilder`. The `PipelineBuilder`requires a `Dria` instance.\n\nWe'll create a `NemotronQA` class to build the pipeline.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-11-3)        self.pipeline = PipelineBuilder(dria)\n```\n\nSince we have implemented three steps, we'll define a list of models for each step.\n\nSee [models](https://docs.dria.co/how-to/models) for the full list of available models.\n\nWe define a list of models which act as a `model pool` for the step. If there are 100 tasks within that step, available nodes that runs one of the models will execute the task asynchronously.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-1)class NemotronQA:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-2)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-3)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-4)        self.models_list = [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-5)            [Model.GPT4O],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-6)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-7)                Model.GPT4O_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-8)                Model.QWEN2_5_32B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-9)                Model.GEMINI_15_FLASH,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-10)                Model.MIXTRAL_8_7B,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-11)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-12)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-13)            [\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-14)                Model.O1_MINI,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-15)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-16)                Model.GPT4O,\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-17)            ],\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-12-18)        ]\n```\n\nWe'll define a `build` method which will connect the steps to the pipeline.\n\nExternal parameters for this pipeline (i.e the ones that are not generated) are pipelines set as the input parameters of `NemotronQA` pipeline.\n\nEven though Pipeline has three external params, first step only requires `topic` and `n_subtopics` as input.\n\nSee the flow of data [section](https://docs.dria.co/cookbook/nemotron_qa#understanding-the-flow-of-data)\n\nThat's why we are setting our pipeline input as `(topic=topic, n_subtopics=n_subtopics` and feeding n\\_questions as a parameter to the first step.\n\n`NemotronSubtopicStep` inputs this parameter to second step. See [subtopic callback](https://docs.dria.co/cookbook/nemotron_qa#implementing-the-nemotronsubtopicstep).\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-1)    def build(self, topic: str, n_subtopics: str, n_questions: str) -> Pipeline:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-2)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-3)        self.pipeline.input(topic=topic, n_subtopics=n_subtopics)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-4)        (\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-5)            self.pipeline\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-6)            << NemotronSubtopicStep(n_questions=n_questions)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-7)            .set_models(self.models_list[0])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-8)            .custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-9)        )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-10)        self.pipeline << NemotronQuestionStep().set_models(self.models_list[1]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-11)        self.pipeline << NemotronAnswerStep().set_models(self.models_list[2]).custom()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-12)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-13-13)        return self.pipeline.build()\n```\n\nDria connects Steps to the pipeline using `<<` notation. The order of the steps determines the order of execution.\n\nPhew, that's it! We've implemented the pipeline.\n\nRunning the Pipeline[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#running-the-pipeline \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\nRunning the pipeline is pretty straight forward.\n\n```\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-1)import os\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-2)from dria.client import Dria\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-3)import asyncio\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-4)import json\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-5)from dria.factory import NemotronQA\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-6)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-8)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-9)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-10)async def run_pipeline():\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-11)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-12)    await dria.initialize()\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-13)    pipeline = NemotronQA(dria).build(\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-14)        topic=\"Machine Learning\", n_subtopics=\"10\", n_questions=\"5\"\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-15)    )\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-16)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-17)    result = await pipeline.execute(return_output=True)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-18)    with open(\"output.json\", \"w\") as f:\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-19)        json.dump(result, f, indent=4)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-20)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-21)\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-22)if __name__ == \"__main__\":\n[](https://docs.dria.co/cookbook/nemotron_qa#__codelineno-14-23)    asyncio.run(run_pipeline())\n```\n\nCode[\u00b6](https://docs.dria.co/cookbook/nemotron_qa#code \"Permanent link\")\n------------------------------------------------------------------------\n\nAccess the full code [here](https://github.com/firstbatchxyz/dria-sdk/tree/master/examples/nvidias_preference_data_pipeline).\n",
    "url": "https://docs.dria.co/cookbook/nemotron_qa"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Evolve Quality - Dria Docs\n\nURL Source: https://docs.dria.co/factory/quality_evolution\n\nMarkdown Content:\nEvolveQuality[\u00b6](https://docs.dria.co/factory/quality_evolution#evolvequality \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/quality_evolution#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveQuality is a singleton template that evolves or improves text responses based on specific quality dimensions. It takes an original response and enhances it according to one of several methods: helpfulness, relevance, depth, creativity, or detail level.\n\nInputs[\u00b6](https://docs.dria.co/factory/quality_evolution#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt or context |\n| response | str | The response text to be evolved |\n| method | Literal | Evolution method to apply (\"HELPFULNESS\", \"RELEVANCE\", \"DEEPENING\", \"CREATIVITY\", \"DETAILS\") |\n\nOutputs[\u00b6](https://docs.dria.co/factory/quality_evolution#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| response | str | The original response text |\n| evolved\\_response | str | The evolved/rewritten response |\n| method | str | Method used for evolution |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/quality_evolution#usage \"Permanent link\")\n\nEvolveQuality instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-1)from dria.factory import EvolveQuality\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-4)    name=\"EvolveQuality\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-5)    description=\"A dataset for response quality evolution\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-6)    schema=EvolveQuality.OutputSchema,\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe singleton supports five evolution methods: - HELPFULNESS: Makes the response more helpful to the user - RELEVANCE: Improves relevance to the given prompt - DEEPENING: Increases the depth of the response - CREATIVITY: Enhances creative aspects - DETAILS: Adds more detailed information\n\n### Expected output[\u00b6](https://docs.dria.co/factory/quality_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-2)\"response\":\"Photosynthesis is the process by which plants make their own food using sunlight.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-3)\"evolved_response\":\"Photosynthesis is a complex biochemical process through which plants, algae, and some bacteria convert light energy into chemical energy. This process occurs in the chloroplasts of plant cells and involves two main stages: the light-dependent reactions and the light-independent reactions (Calvin cycle). During the light-dependent reactions, chlorophyll and other pigments in the thylakoid membranes absorb sunlight, which drives the splitting of water molecules into oxygen, protons, and electrons. This creates a proton gradient that powers the production of ATP. The light-independent reactions use the energy from ATP and NADPH (produced in the light-dependent reactions) to fix carbon dioxide from the air into glucose through a series of enzymatic reactions. This glucose serves as the primary energy source for the plant and can be used to synthesize other organic compounds necessary for growth and development. Photosynthesis is crucial for life on Earth, as it produces oxygen as a byproduct and forms the base of most food chains in ecosystems.\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-4)\"method\":\"DEEPENING\",\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-5)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/quality_evolution#__codelineno-1-6)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/quality_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolquality/)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/quality_evolution"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: MultiHopQA - Dria Docs\n\nURL Source: https://docs.dria.co/factory/multihopqa\n\nMarkdown Content:\nMultiHopQuestion[\u00b6](https://docs.dria.co/factory/multihopqa#multihopquestion \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/multihopqa#overview \"Permanent link\")\n------------------------------------------------------------------------------\n\nMultiHopQuestion is a singleton template that generates multi-hop questions from three document chunks. It creates a set of questions with increasing complexity (1-hop, 2-hop, and 3-hop) along with their corresponding answers based on the provided input documents.\n\nInputs[\u00b6](https://docs.dria.co/factory/multihopqa#inputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| chunks | List\\[str\\] | A list of exactly three document chunks used as source material for question generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/multihopqa#outputs \"Permanent link\")\n----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| one\\_hop | str | A single-step (1-hop) question based on the input documents |\n| two\\_hop | str | A two-step (2-hop) question requiring information from multiple documents |\n| three\\_hop | str | A three-step (3-hop) question requiring complex reasoning across all documents |\n| answer | str | The answer to the generated questions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/multihopqa#usage \"Permanent link\")\n\nMultiHopQuestion instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-1)from dria.factory import MultiHopQuestion\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-2)\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-4)    name=\"MultiHopQuestion\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-5)    description=\"A dataset for multi-hop question generation\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-6)    schema=MultiHopQuestion.OutputSchema,\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-7))\n[](https://docs.dria.co/factory/multihopqa#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/multihopqa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-2){\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-3)\"1-hop\":\"Who was William de Ros's favorite son, as indicated by the land he inherited?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-4)\"2-hop\":\"Which of William de Ros's sons received a portion of his patrimony, overriding family duty and convention, according to G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-5)\"3-hop\":\"Who was described as the favorite son and also benefited from his father's decision to override family duty and convention regarding the inheritance, as mentioned by both Charles de Ross and G. L. Harriss?\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-6)\"answer\":\"William de Ros's third son, Robert\",\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-7)\"model\":\"mixtral:8x7b\"\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-8)}\n[](https://docs.dria.co/factory/multihopqa#__codelineno-1-9)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/multihopqa#references \"Permanent link\")\n\n*   [Multi-hop Question Answering](https://arxiv.org/abs/1809.09600)\n*   [Explainable Multi-hop Question Generation: An End-to-End Approach without Intermediate Question Labeling](https://arxiv.org/pdf/2404.00571)\n",
    "url": "https://docs.dria.co/factory/multihopqa"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: CSVExtenderPipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/csv_extender\n\nMarkdown Content:\n`CSVExtenderPipeline` is a class that creates a pipeline for extending a given `csv`. The pipeline generates new rows based on the existing ones.\n\nOverview[\u00b6](https://docs.dria.co/factory/csv_extender#overview \"Permanent link\")\n--------------------------------------------------------------------------------\n\nThis pipeline extends a given `csv` by generating new rows based on the existing ones. The extension is done by adding new subcategories to the existing categories. The number of subcategories can be specified to determine the number of rows to be generated.\n\n#### Input[\u00b6](https://docs.dria.co/factory/csv_extender#input \"Permanent link\")\n\n*   `csv` (`str`): The csv data to be extended.\n*   `num_values` (`int`): The number of new independent values\n*   `num_rows` (`int`): The number of rows to be generated for each value\n\n> You'll get num\\_values \\* num\\_rows new entries in the output.\n\n#### Expected output (probably a large file)[\u00b6](https://docs.dria.co/factory/csv_extender#expected-output-probably-a-large-file \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-1){\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-2)\"extended_csv\":\"category,subcategory,task\\nFile System, File, Create a new File\\nFile System, File, Edit the contents of a File\\nFile System, File, Read the contents of a File\\nFile System, File, Delete a File\\nFile System, File, Copy a File\\nFile System, File, Move a File\\nFile System, File, Rename a File\\nFile Syste, Folder, Create a new Folder\\nFile System, Folder, Delete a Folder\\nFile System, Folder, Copy a Folder\\nFile System, Folder, Move a Folder\\nFile System, Folder, Rename a Folder\\nFile System, Folder, List the contents of a Folder\\nFile System, Folder, Move a File to a Folder\\nFile System, Folder, Copy a File to a Folder\\nWeb Browser, Search, Search over a query\\nWeb Browser, Search, Search for images\\nWeb Browser, Search, Search for news\\nWeb Browser, Access, Scrape the content of a website\\nWeb Browser, Access, Take a screenshot of a website\\nWeb Browser, Access, Download a file/files from a website\\nWeb Browser, Access, Fill out forms\\nCommunication, Email, Send an email\\nCommunication, Email, Read the contents of an email\\nCommunication, Email, Retrieve the last n emails\\nScheduling, To-Do List\"\n[](https://docs.dria.co/factory/csv_extender#__codelineno-0-3)}\n```\n",
    "url": "https://docs.dria.co/factory/csv_extender"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Instruction Backtranslation - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_backtranslation\n\nMarkdown Content:\nInstructionBacktranslation[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#instructionbacktranslation \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------------\n\nInstructionBacktranslation is a singleton class that evaluates instruction-generation pairs. It processes an original instruction and its generated text, providing a score and reasoning for the evaluation.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evaluated |\n| generation | str | The generated text to be evaluated against the instruction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Detailed explanation for the evaluation score |\n| score | str | Evaluation score for the instruction-generation pair |\n| instruction | str | Original instruction (echoed from input) |\n| generation | str | Generated text (echoed from input) |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#usage \"Permanent link\")\n\nInstructionBacktranslation instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-1)from dria.factory import InstructionBacktranslation\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-4)    name=\"instruction_backtranslation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-5)    description=\"A dataset for instruction-generation pair evaluation\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-6)    schema=InstructionBacktranslation.OutputSchema,\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-1)[\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-2){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-3)\"reasoning\":\"The response is concise, accurate, and directly answers the user's question.  There's no unnecessary information or fluff. It's a perfect example of a simple, effective AI assistant response.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-4)\"score\":\"5\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-5)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-6)\"generation\":\"It's 60.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-7)\"model\":\"gemini-1.5-flash\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-8)},\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-9){\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-10)\"reasoning\":\"The candidate answer is incorrect, as it fails to provide the correct answer to the math question \\\"What is 3 times 20?\\\" The correct response should be \\\"The answer is 60.\\\" Since the candidate answer gives an incorrect result and does not demonstrate any helpfulness or relevance to the user's request, it is a poor response overall.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-11)\"score\":\"1\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-12)\"instruction\":\"What is 3 times 20?\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-13)\"generation\":\"It's 59.\",\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-14)\"model\":\"gpt-4o-mini\"\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-15)}\n[](https://docs.dria.co/factory/instruction_backtranslation#__codelineno-1-16)]\n```\n\nReferences[\u00b6](https://docs.dria.co/factory/instruction_backtranslation#references \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\n*   [Distilabel InstructionBacktranslation](https://distilabel.argilla.io/latest/components-gallery/tasks/instructionbacktranslation/)\n*   [Self-Alignment with Instruction Backtranslation](https://arxiv.org/pdf/2308.06259)\n",
    "url": "https://docs.dria.co/factory/instruction_backtranslation"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: List Extender - Dria Docs\n\nURL Source: https://docs.dria.co/factory/list_extender\n\nMarkdown Content:\nListExtender is a singleton class that extends a given list of items by generating additional related items. It takes an initial list as input and returns an extended version of that list while maintaining uniqueness of items.\n\n```\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-1){\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-2)\"extended_list\":[\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-3)\"Ancient Civilizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-4)\"Medieval History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-5)\"Modern History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-6)\"World History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-7)\"American History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-8)\"European History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-9)\"Asian History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-10)\"African History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-11)\"Historiography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-12)\"Historical Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-13)\"Historical Sources\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-14)\"Historical Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-15)\"Social History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-16)\"Political History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-17)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-18)\"Cultural History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-19)\"Military History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-20)\"Science and Technology History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-21)\"History of Art\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-22)\"History of Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-23)\"History of Music\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-24)\"History of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-25)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-26)\"History of Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-27)\"History of Medicine\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-28)\"History of Law\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-29)\"History of Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-30)\"History of Race\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-31)\"History of Immigration\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-32)\"History of Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-33)\"History of the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-34)\"History of Climate Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-35)\"History of the Internet\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-36)\"History of Artificial Intelligence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-37)\"History of the Future\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-38)\"Literary Genres and Forms\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-39)\"Historical Periods and Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-40)\"Literary Theory and Criticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-41)\"Authorship and Writing Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-42)\"Character Development and Plot\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-43)\"Themes and Motifs in Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-44)\"Symbolism and Imagery\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-45)\"Language and Style\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-46)\"Reading and Interpretation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-47)\"Literary History and Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-48)\"Social and Cultural Context\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-49)\"Literary Canon and Diversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-50)\"Adaptation and Transformation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-51)\"Literature and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-52)\"Literature and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-53)\"Literature and Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-54)\"Metaphysics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-55)\"Epistemology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-56)\"Ethics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-57)\"Logic\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-58)\"Political Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-59)\"Philosophy of Mind\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-60)\"Philosophy of Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-61)\"Philosophy of Language\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-62)\"History of Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-63)\"Contemporary Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-64)\"Eastern Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-65)\"Western Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-66)\"Existentialism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-67)\"Nihilism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-68)\"Postmodernism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-69)\"Feminist Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-70)\"Environmental Philosophy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-71)\"Biological Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-72)\"Cognitive Processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-73)\"Developmental Stages\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-74)\"Social Influences\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-75)\"Personality Theories\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-76)\"Mental Health Disorders\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-77)\"Psychological Assessment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-78)\"Therapeutic Approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-79)\"Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-80)\"Cellular Biology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-81)\"Genetics and Heredity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-82)\"Evolution and Biodiversity\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-83)\"Ecology and Ecosystems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-84)\"Human Biology and Health\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-85)\"Biotechnology and Genetic Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-86)\"Molecular Biology and Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-87)\"Anatomy and Physiology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-88)\"Microbiology and Immunology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-89)\"Plant Biology and Botany\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-90)\"Zoology and Animal Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-91)\"Bioethics and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-92)\"Atomic Structure and Bonding\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-93)\"Chemical Reactions and Stoichiometry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-94)\"States of Matter\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-95)\"Solutions and Mixtures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-96)\"Thermochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-97)\"Equilibrium and Kinetics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-98)\"Acids and Bases\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-99)\"Redox Reactions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-100)\"Organic Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-101)\"Analytical Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-102)\"Biochemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-103)\"Environmental Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-104)\"Materials Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-105)\"Nuclear Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-106)\"Computational Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-107)\"History of Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-108)\"Famous Chemists and Discoveries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-109)\"Chemistry in Everyday Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-110)\"Chemistry and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-111)\"Careers in Chemistry\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-112)\"Celestial Objects and Phenomena\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-113)\"Solar System and Beyond\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-114)\"Stars and Stellar Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-115)\"Galaxies and Cosmology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-116)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-117)\"Observational Astronomy and Telescopes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-118)\"Space Exploration and Missions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-119)\"History of Astronomy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-120)\"Astrobiology and the Search for Life\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-121)\"Astrophysics and Fundamental Forces\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-122)\"Astronomy and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-123)\"Engineering Disciplines\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-124)\"Engineering Design Process\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-125)\"Engineering Ethics and Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-126)\"Engineering Materials and Manufacturing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-127)\"Engineering Mechanics and Statics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-128)\"Engineering Thermodynamics and Heat Transfer\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-129)\"Engineering Fluid Mechanics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-130)\"Engineering Project Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-131)\"Engineering and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-132)\"Engineering in Society and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-133)\"Engineering Education and Training\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-134)\"Emerging Technologies in Engineering\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-135)\"Engineering for Global Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-136)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-137)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-138)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-139)\"Market Structures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-140)\"Supply and Demand\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-141)\"Economic Growth\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-142)\"Inflation and Deflation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-143)\"International Trade\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-144)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-145)\"Financial Markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-146)\"Government Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-147)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-148)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-149)\"Economic Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-150)\"Environmental Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-151)\"Economic Inequality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-152)\"Physical Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-153)\"Human Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-154)\"Geographic Information Systems (GIS)\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-155)\"Cartography and Mapping\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-156)\"Climate and Weather\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-157)\"Landforms and Geology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-158)\"Population Distribution and Density\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-159)\"Urban Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-160)\"Environmental Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-161)\"Economic Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-162)\"Political Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-163)\"Cultural Geography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-164)\"Remote Sensing and Aerial Photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-165)\"Geographic Data Analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-166)\"Geography in Education\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-167)\"Geography and Sustainability\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-168)\"Geographic Research Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-169)\"History of Geographic Thought\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-170)\"History of political systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-171)\"Major political ideologies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-172)\"Global political alliances\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-173)\"Elections and voting processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-174)\"Political economy analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-175)\"International relations theory\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-176)\"Policy making and implementation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-177)\"Camera fundamentals and types\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-178)\"Composition and framing techniques\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-179)\"Lighting and exposure control\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-180)\"Post-processing and editing\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-181)\"Photography genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-182)\"History of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-183)\"Photography equipment and technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-184)\"Business of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-185)\"Photography ethics and copyright\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-186)\"Photography for social impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-187)\"Digital photography and its impact\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-188)\"Photography as an art form\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-189)\"The future of photography\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-190)\"Business Strategy and Planning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-191)\"Marketing and Sales\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-192)\"Finance and Accounting\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-193)\"Operations Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-194)\"Human Resources Management\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-195)\"Entrepreneurship and Innovation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-196)\"Organizational Behavior\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-197)\"Business Ethics and Social Responsibility\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-198)\"International Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-199)\"E-commerce and Digital Business\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-200)\"Business Analytics and Data Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-201)\"Business Law and Regulation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-202)\"History of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-203)\"Types of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-204)\"Sports Equipment and Technology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-205)\"Sports Training and Conditioning\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-206)\"Sports Nutrition\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-207)\"Sports Injuries and Rehabilitation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-208)\"Sports Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-209)\"Sports Officiating\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-210)\"Sports Broadcasting and Media\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-211)\"Sports Marketing and Sponsorship\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-212)\"Professional Sports Leagues\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-213)\"Amateur Sports and Recreation\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-214)\"Sports and Society\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-215)\"Sports and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-216)\"Gender and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-217)\"Race and Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-218)\"Sports and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-219)\"Sports and Globalization\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-220)\"Sports Ethics and Fair Play\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-221)\"Sports and the Environment\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-222)\"Future of Sports\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-223)\"History of cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-224)\"Film genres and styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-225)\"Directing techniques and approaches\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-226)\"Screenwriting and script analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-227)\"Cinematography and visual storytelling\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-228)\"Editing and post-production processes\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-229)\"Film sound and music scoring\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-230)\"Acting methods and performance styles\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-231)\"Independent vs. studio filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-232)\"International film industries\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-233)\"Film criticism and analysis\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-234)\"Impact of digital technology in film\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-235)\"Representation and diversity in cinema\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-236)\"Film festivals and markets\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-237)\"Future trends in filmmaking\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-238)\"Microeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-239)\"Macroeconomics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-240)\"Economic Systems\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-241)\"Economic Growth and Development\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-242)\"International Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-243)\"Labor Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-244)\"Financial Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-245)\"Behavioral Economics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-246)\"Economic History\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-247)\"Economic Policy\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-248)\"Religious History and Origins\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-249)\"Major World Religions\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-250)\"Religious Beliefs and Practices\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-251)\"Religious Texts and Scriptures\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-252)\"Religious Rituals and Ceremonies\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-253)\"Religious Ethics and Morality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-254)\"Religious Institutions and Organizations\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-255)\"Religious Art and Architecture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-256)\"Religious Music and Literature\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-257)\"Religious Festivals and Holidays\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-258)\"Religious Experiences and Mysticism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-259)\"Religious Social Movements\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-260)\"Religious Conflict and Violence\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-261)\"Religious Tolerance and Pluralism\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-262)\"Religious Freedom and Rights\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-263)\"Religion and Science\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-264)\"Religion and Politics\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-265)\"Religion and Gender\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-266)\"Religion and Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-267)\"Religion and Psychology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-268)\"Religion and Sociology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-269)\"Religion in the Modern World\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-270)\"Human Origins and Evolution\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-271)\"Cultural Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-272)\"Archaeology and Material Culture\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-273)\"Linguistic Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-274)\"Biological Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-275)\"Social and Cultural Change\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-276)\"Ethnographic Methods\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-277)\"Anthropology of Religion\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-278)\"Medical Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-279)\"Applied Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-280)\"Global Anthropology\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-281)\"Anthropology of the Body\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-282)\"Gender and Sexuality\",\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-283)\"Race and Ethnicity\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-284)],\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-285)\"model\":\"Llama3.1:8B\"\n[](https://docs.dria.co/factory/list_extender#__codelineno-1-286)}\n```\n",
    "url": "https://docs.dria.co/factory/list_extender"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: QA Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/qa\n\nMarkdown Content:\nQuestionAnswer[\u00b6](https://docs.dria.co/factory/qa#questionanswer \"Permanent link\")\n----------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/qa#overview \"Permanent link\")\n----------------------------------------------------------------------\n\nThe QuestionAnswer is a pipeline consisting of two singletons. It is designed to generate responses to questions based on provided context while adopting a specific persona. It processes inputs through a workflow that generates contextually relevant answers using AI models.\n\nInputs[\u00b6](https://docs.dria.co/factory/qa#inputs \"Permanent link\")\n------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | Context for answering the question |\n| num\\_questions | int | Number of questions to be generated |\n| persona | str | Persona to adopt while answering |\n\nOutputs[\u00b6](https://docs.dria.co/factory/qa#outputs \"Permanent link\")\n--------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question (echoed from input) |\n| answer | str | Generated answer |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/qa#usage \"Permanent link\")\n\nAnswer instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/qa#__codelineno-0-2)from dria.factory.question_answer import QA\n[](https://docs.dria.co/factory/qa#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/factory/qa#__codelineno-0-4)\n[](https://docs.dria.co/factory/qa#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/qa#__codelineno-0-6)    name=\"QA\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-7)    description=\"A dataset for pages\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-8)    schema=QA[-1].OutputSchema,\n[](https://docs.dria.co/factory/qa#__codelineno-0-9))\n[](https://docs.dria.co/factory/qa#__codelineno-0-10)\n[](https://docs.dria.co/factory/qa#__codelineno-0-11)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/qa#__codelineno-0-12)\n[](https://docs.dria.co/factory/qa#__codelineno-0-13)\n[](https://docs.dria.co/factory/qa#__codelineno-0-14)instructions = [\n[](https://docs.dria.co/factory/qa#__codelineno-0-15)    {\n[](https://docs.dria.co/factory/qa#__codelineno-0-16)        \"context\": \"Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-17)        \"persona\": \"A highschool student.\",\n[](https://docs.dria.co/factory/qa#__codelineno-0-18)        \"num_questions\": 3,\n[](https://docs.dria.co/factory/qa#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/qa#__codelineno-0-20)]\n[](https://docs.dria.co/factory/qa#__codelineno-0-21)\n[](https://docs.dria.co/factory/qa#__codelineno-0-22)asyncio.run(\n[](https://docs.dria.co/factory/qa#__codelineno-0-23)    generator.generate(\n[](https://docs.dria.co/factory/qa#__codelineno-0-24)        instructions=instructions,\n[](https://docs.dria.co/factory/qa#__codelineno-0-25)        singletons=QA,\n[](https://docs.dria.co/factory/qa#__codelineno-0-26)        models=Model.GPT4O,\n[](https://docs.dria.co/factory/qa#__codelineno-0-27)    )\n[](https://docs.dria.co/factory/qa#__codelineno-0-28))\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/qa#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/qa#__codelineno-1-1)[\n[](https://docs.dria.co/factory/qa#__codelineno-1-2){\n[](https://docs.dria.co/factory/qa#__codelineno-1-3)\"question\":\"How does the feature of Structured Outputs prevent the model from omitting a required key or creating an invalid enum value?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-4)\"answer\":\"Okay, so like, think of Structured Outputs as having a kind of \\\"template\\\" or \\\"guideline\\\" for how the responses should look, right? It\\u2019s like when a teacher gives you a worksheet, and you need to fill in certain blanks and you can't just write random things. The JSON Schema is sort of like that worksheet. It tells the model exactly what pieces of info need to be there (like all the answers you need to fill in), so it doesn\\u2019t skip anything important. And, it stops the model from just making up weird answers (or invalid enum values, to be fancy) because it has to pick from what\\u2019s allowed. It's kinda like having a multiple-choice test where you can only pick A, B, or C, not like, Z or something. So, it keeps everything on track and makes sure nothing's missing or made up!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-5)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-6)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-7){\n[](https://docs.dria.co/factory/qa#__codelineno-1-8)\"question\":\"What role does a JSON Schema play in ensuring that Structured Outputs maintain response accuracy?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-9)\"answer\":\"So, have you ever had to stick to a certain format when writing an essay or something? JSON Schema in this situation is kinda like that format guide but for a computer program. It makes sure all its answers include what they should and nothing they shouldn't have. It's super important for keeping things organized and correct, ensuring that Structured Outputs are always spot-on and don't leave out anything important or add anything that's not supposed to be there.\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-10)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-11)},\n[](https://docs.dria.co/factory/qa#__codelineno-1-12){\n[](https://docs.dria.co/factory/qa#__codelineno-1-13)\"question\":\"In what ways does the feature of Structured Outputs contribute to the reliability of model-generated responses?\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-14)\"answer\":\"Okay, so the way Structured Outputs make model-generated responses more reliable is kind of like having a rulebook for how answers should be written. So, imagine if every time you wrote an answer in class, you had to make sure it fits into a particular format that your teacher gave you. This way, you won't forget to include important stuff, like your name, date, and the actual answer, and you also won't add in random things that your teacher doesn\\u2019t want. It makes the answers neater and more trustworthy. That's what Structured Outputs do; they make sure the model doesn't mess up or go off track by sticking to a guide!\",\n[](https://docs.dria.co/factory/qa#__codelineno-1-15)\"model\":\"gpt-4o\"\n[](https://docs.dria.co/factory/qa#__codelineno-1-16)}\n[](https://docs.dria.co/factory/qa#__codelineno-1-17)]\n```\n",
    "url": "https://docs.dria.co/factory/qa"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Sub-Topic Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/subtopic\n\nMarkdown Content:\nGenerateSubtopics[\u00b6](https://docs.dria.co/factory/subtopic#generatesubtopics \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/subtopic#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nGenerateSubtopics is a singleton template that generates subtopics for a given main topic. It creates a workflow that processes a topic and breaks it down into relevant subtopics using AI generation.\n\nInputs[\u00b6](https://docs.dria.co/factory/subtopic#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | Main topic to generate subtopics for |\n\nOutputs[\u00b6](https://docs.dria.co/factory/subtopic#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| topic | str | The original main topic (echoed from input) |\n| subtopic | str | Generated subtopic of the main topic |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/subtopic#usage \"Permanent link\")\n\nGenerateSubtopics instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-1)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-2)\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-4)    name=\"GenerateSubtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-5)    description=\"A dataset for generating topic subtopics\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-6)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-7))\n[](https://docs.dria.co/factory/subtopic#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected Output[\u00b6](https://docs.dria.co/factory/subtopic#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-1)[\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-2){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-3)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-4)\"subtopic\":\"Ownership and Borrowing Concepts\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-6)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-7){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-8)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-9)\"subtopic\":\"Memory Safety Without Garbage Collection\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-10)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-11)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-12){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-13)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-14)\"subtopic\":\"Zero-Cost Abstractions in Systems Programming\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-15)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-16)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-17){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-18)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-19)\"subtopic\":\"Concurrent Programming with Async/Await\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-20)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-21)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-22){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-23)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-24)\"subtopic\":\"Pattern Matching and Algebraic Data Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-25)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-26)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-27){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-28)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-29)\"subtopic\":\"Performance and Low-Level Control\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-30)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-31)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-32){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-33)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-34)\"subtopic\":\"WebAssembly and Cross-Platform Development\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-35)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-36)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-37){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-38)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-39)\"subtopic\":\"Error Handling with Result and Option Types\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-40)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-41)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-42){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-43)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-44)\"subtopic\":\"Macros and Meta-Programming Techniques\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-45)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-46)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-47){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-48)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-49)\"subtopic\":\"Safety and Compile-Time Guarantees\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-50)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-51)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-52){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-53)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-54)\"subtopic\":\"Cargo Package Management System\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-55)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-56)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-57){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-58)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-59)\"subtopic\":\"Interoperability with C and Other Languages\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-60)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-61)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-62){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-63)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-64)\"subtopic\":\"Functional Programming Paradigms\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-65)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-66)},\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-67){\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-68)\"topic\":\"rust language\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-69)\"subtopic\":\"Systems and Application Programming Use Cases\",\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-70)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-71)}\n[](https://docs.dria.co/factory/subtopic#__codelineno-1-72)]\n```\n",
    "url": "https://docs.dria.co/factory/subtopic"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Iterate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/iterate_code\n\nMarkdown Content:\nIterateCode Singleton[\u00b6](https://docs.dria.co/factory/iterate_code#iteratecode-singleton \"Permanent link\")\n----------------------------------------------------------------------------------------------------------\n\n### Inputs[\u00b6](https://docs.dria.co/factory/iterate_code#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| code | str | The code to iterate over |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/iterate_code#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The original code |\n| iterated\\_code | str | The improved version of the code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/iterate_code#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-1)from dria.factory import IterateCode\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-2)\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-3)iterator = IterateCode(\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-4)    code=\"existing_code\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-5)    instruction=\"Optimize the function\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-6)    language=\"python\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-0-7))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/iterate_code#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-1){\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-2)\"instruction\":\"Add error handling for empty name input\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-4)\"iterated_code\":\"def greet(name):\\n    # Check if the input is not None and strip leading/trailing whitespace characters\\n    if name and name.strip():\\n        print(\\\"Hello, \\\" + name)\\n    else:\\n        raise ValueError(\\\\'Name cannot be empty\\\\')  # Raise an error if the name is empty or contains only spaces\",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-5)\"code\":\"\\n    def greet(name):\\n        print(\\\"Hello, \\\" + name)\\n    \",\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-6)\"model\":\"deepseek-coder:6.7b\"\n[](https://docs.dria.co/factory/iterate_code#__codelineno-1-7)}\n```\n",
    "url": "https://docs.dria.co/factory/iterate_code"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_matching\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::qxxbl-1735150904348-06e378bf6d90`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_matching"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: WebMultiChoice - Dria Docs\n\nURL Source: https://docs.dria.co/factory/web_multi_choice\n\nMarkdown Content:\n`WebMultiChoice` is a `Singleton` task that answers multiple-choice questions using web search and evaluation.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#inputs \"Permanent link\")\n\n*   question (`str`): The multiple-choice question to be answered.\n*   choices (`List[str]`): A list of possible answer choices for the question.\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/web_multi_choice#outputs \"Permanent link\")\n\n*   answer (`str`): The evaluated answer to the multiple-choice question.\n*   model (`str`): The model used to generate the answer.\n\n### Workflow Steps[\u00b6](https://docs.dria.co/factory/web_multi_choice#workflow-steps \"Permanent link\")\n\n1.  Generate a web search query based on the question and choices.\n2.  Select a URL from the search results.\n3.  Scrape content from the selected URL.\n4.  Generate notes based on the scraped content and the question.\n5.  Evaluate the notes and choices to determine the best answer.\n\n### Example[\u00b6](https://docs.dria.co/factory/web_multi_choice#example \"Permanent link\")\n\nAnswer a multiple-choice question using web search and evaluation. This example uses the `QWEN2_5_7B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-3)from dria.factory import WebMultiChoice\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-6)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-8)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-9)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-11)    web_multi_choice = WebMultiChoice()\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-12)    question = \"A 26-year-old gravida 2 para 1 at 24 weeks gestation is admitted to the labor and delivery suite with mild abdominal cramps, uterine contractions, and a watery vaginal discharge. She has a history of preterm birth. The vital signs are as follows: blood pressure 125/80 mm Hg; heart rate 100/min; respiratory rate 13/min; and temperature 36.6\u2103 (97.9\u2109). The pelvic examination reveals cervical softening and shortening. Transvaginal ultrasound shows a cervical length of 12 mm, which is consistent with preterm labor. A tocolytic and a single dose of betamethasone are administered. Betamethasone stimulates which fetal cells?\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-13)    choices = [\"Goblet cells\", \"Bronchial epithelial cells\", \"Type II pneumocytes\", \"Vascular smooth myocytes\"]  # Type II pneumocytes\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-14)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-15)    res = await dria.execute(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-16)        Task(\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-17)            workflow=web_multi_choice.workflow(question=question, choices=choices),\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-18)            models=[Model.QWEN2_5_7B_FP16, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-19)        )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-20)    )\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-21)    return web_multi_choice.parse_result(res)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-22)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-23)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-24)def main():\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-25)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-26)    print(result)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-27)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-28)\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-29)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-0-30)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-1){\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-2)\"answer\":\"Answer: Based on the provided information and the analysis, the most likely correct answer is:  **Type II pneumocytes**  ### Detailed Reasoning: 1. **Medical Context and Purpose of Betamethasone:**    - Betamethasone is a corticosteroid used to accelerate fetal lung maturity in response to preterm labor.    - The primary goal is to reduce the risk of neonatal respiratory distress syndrome (RDS) by promoting surfactant production.  2. **Fetal Cells Targeted by Betamethasone:**    - The reference materials and analyses clearly indicate that betamethasone stimulates the production of pulmonary surfactant in the fetal lungs.    - Surfactant is primarily produced by type II pneumocytes (also known as type II alveolar cells).  3. **Relevant Analyses:**    - The provided context mentions that 'Betamethasone is a corticosteroid that is often used in obstetric practice to promote lung maturity in the fetus, thereby reducing neonatal morbidity and mortality associated with preterm birth.'    - It further states that betamethasone stimulates the synthesis of surfactant by the fetal lungs.    - The key point is that it 'primarily stimulates the production of surfactant by type II alveolar cells in the fetal lungs.'  4. **Elimination of Other Options:**    - **Goblet cells:** These are found in various parts of the respiratory tract, including the bronchi and trachea, but not specifically involved in surfactant production.    - **Bronchial epithelial cells:** While these cells line the airways, they are not primarily responsible for surfactant production.    - **Vascular smooth myocytes:** These are muscle cells found in blood vessel walls and are not related to lung function or surfactant production.  ### Conclusion: Given that betamethasone is specifically used to promote lung maturity by stimulating the production of pulmonary surfactant, which is a critical function performed by type II pneumocytes, the most likely correct option among those provided is **Type II pneumocytes**.\",\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-3)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/web_multi_choice#__codelineno-1-4)}\n```\n",
    "url": "https://docs.dria.co/factory/web_multi_choice"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Persona Pipeline - Dria Docs\n\nURL Source: https://docs.dria.co/factory/persona\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/persona#overview \"Permanent link\")\n---------------------------------------------------------------------------\n\nPersona is a pipeline made of 4 singletons that generates character backstories or character bios based on provided persona traits and simulation description. It creates a narrative background that can be used in simulations or character development scenarios.\n\n*   **`PersonaBio`**: A short bio for character\n*   **`PersonaBackstory`**: A longer backstory for character\n\nInputs[\u00b6](https://docs.dria.co/factory/persona#inputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| persona\\_traits | List\\[str\\] | The traits of the persona that will be used to generate the backstory |\n| simulation\\_description | str | The description of the simulation context |\n\nPersonaBio[\u00b6](https://docs.dria.co/factory/persona#personabio \"Permanent link\")\n-------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bio | str | Generated character bio |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage \"Permanent link\")\n\nPersonaBio instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-0-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-0-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-0-3)from dria.factory.persona import PersonaBio\n[](https://docs.dria.co/factory/persona#__codelineno-0-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-0-5)\n[](https://docs.dria.co/factory/persona#__codelineno-0-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-0-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-9)    schema=PersonaBio[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-0-10))\n[](https://docs.dria.co/factory/persona#__codelineno-0-11)\n[](https://docs.dria.co/factory/persona#__codelineno-0-12)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/factory/persona#__codelineno-0-13)\n[](https://docs.dria.co/factory/persona#__codelineno-0-14)\n[](https://docs.dria.co/factory/persona#__codelineno-0-15)instructions = [\n[](https://docs.dria.co/factory/persona#__codelineno-0-16)    {\n[](https://docs.dria.co/factory/persona#__codelineno-0-17)        \"simulation_description\": \"A medieval village in northern britain\",\n[](https://docs.dria.co/factory/persona#__codelineno-0-18)        \"num_of_samples\": 2,\n[](https://docs.dria.co/factory/persona#__codelineno-0-19)    },\n[](https://docs.dria.co/factory/persona#__codelineno-0-20)    {\"simulation_description\": \"A modern neo-tokio\", \"num_of_samples\": 2},\n[](https://docs.dria.co/factory/persona#__codelineno-0-21)]\n[](https://docs.dria.co/factory/persona#__codelineno-0-22)\n[](https://docs.dria.co/factory/persona#__codelineno-0-23)asyncio.run(\n[](https://docs.dria.co/factory/persona#__codelineno-0-24)    generator.generate(\n[](https://docs.dria.co/factory/persona#__codelineno-0-25)        instructions=instructions,\n[](https://docs.dria.co/factory/persona#__codelineno-0-26)        singletons=PersonaBio,\n[](https://docs.dria.co/factory/persona#__codelineno-0-27)        models=[\n[](https://docs.dria.co/factory/persona#__codelineno-0-28)            [Model.ANTHROPIC_HAIKU_3_5_OR, Model.QWEN2_5_72B_OR],\n[](https://docs.dria.co/factory/persona#__codelineno-0-29)            [\n[](https://docs.dria.co/factory/persona#__codelineno-0-30)                Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-31)                Model.QWEN2_5_7B_FP16,\n[](https://docs.dria.co/factory/persona#__codelineno-0-32)                Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-33)                Model.QWEN2_5_7B_OR,\n[](https://docs.dria.co/factory/persona#__codelineno-0-34)            ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-35)        ],\n[](https://docs.dria.co/factory/persona#__codelineno-0-36)    )\n[](https://docs.dria.co/factory/persona#__codelineno-0-37))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-1-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-1-2){\n[](https://docs.dria.co/factory/persona#__codelineno-1-3)\"bio\":\"Eira, a quiet and determined 32-year-old resident of Inverness, thrives as a weaver within the village's small but thriving textile industry, crafting intricate fabrics from locally-sourced wool while owning four generations-old loom passed down from her devoutly God-fearing grandmother, who introduced her to the village's strong Celtic traditions and value of fair dealings that helps her maintain harmony amidst the internal power struggles between the Church leaders and local lords amidst a recent surge in communal disputes and ambitious infrastructure projects.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-6){\n[](https://docs.dria.co/factory/persona#__codelineno-1-7)\"bio\":\"Aria, a 27-year-old pagan healer and shopkeeper from the isolated village of Dunfermline, resides at the intersection of Agriculture and the lack of infrastructure, where survival requires adaptability, in an 8-acre settlement of 3372 residents governed by a Feudal Lord amidst scarce resources and poor overall health.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-10){\n[](https://docs.dria.co/factory/persona#__codelineno-1-11)\"bio\":\"A 78-year-old married PhD-educated female merchant named Emma navigates the high-stakes business world in the vibrant metropolis of Neo-Tokyo, relying on her extensive business network and innate negotiation skills to steadily increase her annual income by 88 thousand dollars, despite expressing dissatisfaction with her costly private health insurance through the Neo-Tokyo Clinic, which she visits monthly for management of her complex publishing industry dealings.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-1-14){\n[](https://docs.dria.co/factory/persona#__codelineno-1-15)\"bio\":\"A 43-year-old widowed male engineer named Ryan struggles to make ends meet in a modest suburban home, relying on his high school education and working at a job that barely covers his expenses, while visiting the City Health Center due to rare health issues, although he remains dissatisfied with the facility's cleanliness; Ryan exhibits a moderate reliance on technology for healthcare purposes and prefers email communication with his providers in the midst of a rapidly evolving neo-Tokio landscape.\",\n[](https://docs.dria.co/factory/persona#__codelineno-1-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-1-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-1-18)]\n```\n\nPersonaBackstory[\u00b6](https://docs.dria.co/factory/persona#personabackstory \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Outputs[\u00b6](https://docs.dria.co/factory/persona#outputs_1 \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| backstory | str | Generated character backstory narrative |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/persona#usage_1 \"Permanent link\")\n\nPersonaBackstory instance can be used same as PersonaBio in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-2-1)import json\n[](https://docs.dria.co/factory/persona#__codelineno-2-2)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/factory/persona#__codelineno-2-3)from dria.factory.persona import PersonaBackstory\n[](https://docs.dria.co/factory/persona#__codelineno-2-4)import asyncio\n[](https://docs.dria.co/factory/persona#__codelineno-2-5)\n[](https://docs.dria.co/factory/persona#__codelineno-2-6)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/persona#__codelineno-2-7)    name=\"personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-8)    description=\"A dataset for personas\",\n[](https://docs.dria.co/factory/persona#__codelineno-2-9)    schema=PersonaBackstory[-1].OutputSchema,\n[](https://docs.dria.co/factory/persona#__codelineno-2-10))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/persona#expected-output_1 \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/persona#__codelineno-3-1)[\n[](https://docs.dria.co/factory/persona#__codelineno-3-2){\n[](https://docs.dria.co/factory/persona#__codelineno-3-3)\"backstory\":\"James, a 58-year-old Healer, lives in a humble castle as a single servant to the Lord of the manor. A devout Pagan, James has spent his life devoted to the earth and its creatures. He is the father of four children, whom he raised on his own after his wife's passing. James's ability to provide for his family led him to develop exceptional cooking skills, which he still uses to prepare medicinal remedies and nourishment for the villagers. Although his lithe figure now shows signs of debilitation due to a long-standing wound, James's sharp mind remains unimpaired. He has even begun translating ancient pagan texts, which he claims grant him insight into the workings of the physical world. His reputation as a skilled Healer has earned him a modest income, 842 silver pennies annually. This meager compensation, combined with his affection for the local flora, has made James a familiar figure in the village's bustling marketplace.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-4)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-5)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-6){\n[](https://docs.dria.co/factory/persona#__codelineno-3-7)\"backstory\":\"Caitlyn grew up in the rough, rural landscape of northern Britain, where she learned to be fiercely resilient and adaptable from a young age. As the eldest of five siblings, she took on significant caretaking responsibilities, managing their family's small farm and spending long hours alongside her mother tending to the children. As a scholar, Caitlyn's curiosity and drive for knowledge led her to hone her skills in trading and commerce, skills that would eventually contribute to the couple forming a modest inn. She married young and had four children, but her marriage ended due to her husband's struggles with wandering, and Caitlyn continued as the primary breadwinner. After years spent managing the inn, she became well-respected for her business acumen within the village. As an atheist in a largely devout community, Caitlyn learned to navigate around this difference, maintaining a loving relationship with her children and earning a reputation as a fair and compassionate innkeeper. In her late 50s, she has built a contented life, focusing on passing along her knowledge to her grown children and other locals, as well as the art of creating hospitality a vibrant aspect of village life. Despite the struggles and social pressures, Caitlyn thrives, situated in her cozy yet rustic shack, running the inn and prompting admiration in all.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-8)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-9)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-10){\n[](https://docs.dria.co/factory/persona#__codelineno-3-11)\"backstory\":\"Akira Nakamura, a 30-year-old single woman, has been living in the high-tech metropolis of Neo-Tokyo since her early twenties. Born in a small town, she moved to the city for college, earning a degree in computer science. Akira's childhood was marked by limited resources, but her curiosity and innate problem-solving skills helped her excel academically. After graduation, she struggled to find stable employment, often relying on friends to cover living expenses. The low paying jobs she landed forced her to prioritize, and she often put her health on the back burner, occasionally visiting the emergency room for bouts of poor health. Dr. Brown, her family doctor, often cautions her about her lifestyle and advises her to take care of herself. Despite the stresses of her life, Akira remains an avid exerciser, believing that it helps to alleviate stress. With her income still modest, she often relies on secondary diagnoses from other doctors, who are often more lenient than Dr. Brown. Her health is poor due to these factors, but she is usually satisfied with her healthcare service because of the prompt attention she receives. Like many in Neo-Tokyo, Akira is resourceful, often relying on technology to find ways to adapt and cope with her situation, which she finds both reassuring and occasionally overwhelming. Despite the setbacks, Akira remains determined to find a stable financial footing, hoping that one day she will be able to dedicate more resources to her health and happiness. \",\n[](https://docs.dria.co/factory/persona#__codelineno-3-12)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-13)},\n[](https://docs.dria.co/factory/persona#__codelineno-3-14){\n[](https://docs.dria.co/factory/persona#__codelineno-3-15)\"backstory\":\"Taro Nakamura, a 52-year-old widower, made Tokyo his home in the early 1980s. After moving from the countryside, he worked as a general laborer in various factories, eventually landing a job at a cutting-edge manufacturing facility in the area. Without a formal high school diploma, Taro's associate's degree from a vocational school prepared him for the demands of his industry. Living with roommates in a compact Tokyo apartment, he has managed to raise a small family and secure a decent income. Taro's fair health is a result of moderation and regular check-ins with Dr. Patel at the local clinic. While Taro has always found Dr. Patel's care satisfactory for its affordability and his rare, yearly visits, he can be particular about hospital staff, sometimes finding them unhelpful. A significant factor contributing to Taro's working-class lifestyle, frequent use of technology in healthcare management only adds to the simplification and affordability he values in his care. His history, once focused on manufacturing, later shifted towards installing and maintaining home appliances, ensuring a medium and steady income while opportunities remain humble. Highly valued frugalness has turned out necessary due to chronic consumption of alcohol that keeps his health fair. A potential concern for him has always been his family's medical history and, although sedentary, the easy access to caregivers coupled with the busy type of schedule allow him to adopt a mushrooming independence something even for his environments unknowingly erases.\",\n[](https://docs.dria.co/factory/persona#__codelineno-3-16)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/factory/persona#__codelineno-3-17)}\n[](https://docs.dria.co/factory/persona#__codelineno-3-18)]\n```\n",
    "url": "https://docs.dria.co/factory/persona"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Evolve Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evolve_complexity\n\nMarkdown Content:\nEvolveComplexity[\u00b6](https://docs.dria.co/factory/evolve_complexity#evolvecomplexity \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evolve_complexity#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nEvolveComplexity is a singleton that takes an instruction and evolves it into a more complex version while maintaining the core meaning and intent. This is useful for creating variations of instructions with different complexity levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction to be evolved |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evolve_complexity#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| evolved\\_instruction | str | The evolved version of the instruction with increased complexity |\n| instruction | str | Original instruction (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evolve_complexity#usage \"Permanent link\")\n\nEvolveComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-1)from dria.factory import EvolveComplexity\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-2)\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-4)    name=\"evolve_complexity\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-5)    description=\"A dataset for instruction evolution\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-6)    schema=EvolveComplexity.OutputSchema,\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-7))\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evolve_complexity#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-1){\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-2)\"evolved_instruction\":\"Write a short story about a cat who, unbeknownst to its human family, communicates with other cats in a secret language that revolves around solving mysteries within the neighborhood. The cat must navigate between two worlds: the simple life of domesticity and the complex web of feline intrigue, all while trying not to reveal their dual life to their human companions.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-3)\"instruction\":\"Write a short story about a cat.\",\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-4)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/evolve_complexity#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/evolve_complexity#references \"Permanent link\")\n\n*   [EvolComplexity Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolcomplexity/)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/evolve_complexity"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: MagPie - Dria Docs\n\nURL Source: https://docs.dria.co/factory/magpie\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/magpie#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nMagPie is a singleton template designed to generate dialogues between two personas. It facilitates the creation of conversational exchanges by managing turns between an instructor and a responder, with configurable number of dialogue turns.\n\nInputs[\u00b6](https://docs.dria.co/factory/magpie#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor\\_persona | str | Persona of the instructor who initiates the dialogue |\n| responding\\_persona | str | Persona of the responder who replies to the instructor |\n| num\\_turns | conint(ge=1) | Number of conversation turns (must be greater than or equal to 1) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/magpie#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| dialogue | List\\[DialogueTurn\\] | List of dialogue turns, each containing instructor and responder messages |\n| model | str | The AI model used for generation |\n\n### DialogueTurn Schema[\u00b6](https://docs.dria.co/factory/magpie#dialogueturn-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructor | str | Instructor's message in the dialogue turn |\n| responder | str | Responder's message in the dialogue turn |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/magpie#usage \"Permanent link\")\n\nMagPie instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-0-1)from dria.factory import MagPie\n[](https://docs.dria.co/factory/magpie#__codelineno-0-2)\n[](https://docs.dria.co/factory/magpie#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/magpie#__codelineno-0-4)    name=\"magpie_dialogue\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-5)    description=\"A dataset for dialogue generation between personas\",\n[](https://docs.dria.co/factory/magpie#__codelineno-0-6)    schema=MagPie.OutputSchema,\n[](https://docs.dria.co/factory/magpie#__codelineno-0-7))\n[](https://docs.dria.co/factory/magpie#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/magpie#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/magpie#__codelineno-1-1){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-2)\"dialogue\":[\n[](https://docs.dria.co/factory/magpie#__codelineno-1-3){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-4)\"instructor\":\"Can you tell me more about how you were trained?  What kind of data did you learn from? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-5)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-6){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-7)\"responder\":\"That's a fascinating question! While I can't disclose the precise details of my training dataset \u2013 that information is kept confidential by my creators \u2013  I can tell you it was vast and diverse.  \\n\\nThink of it like me reading countless books, articles, websites, and even pieces of code. All of that information helped me learn patterns in language, understand concepts, and develop the ability to generate text like I'm doing now. \\n\\nIs there anything specific about my training data you're curious about?  Perhaps the types of topics or the languages involved?  I can try to give you some general insights. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-8)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-9){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-10)\"instructor\":\"Were there any specific biases in the data that your creators tried to mitigate during the training process?  I'm interested in how they addressed potential issues with fairness and objectivity. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-11)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-12){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-13)\"responder\":\"That's a very important question! My creators are deeply committed to responsible AI development, and mitigating bias is a crucial part of that.  \\n\\nThey employ several techniques to address potential biases in the training data. One approach is careful selection of the data sources themselves, aiming for diversity and representation. \\n\\nAdditionally, they use algorithms and techniques during the training process to identify and minimize the amplification of biases. It's an ongoing challenge, as bias can be subtle and pervasive, but they are constantly working to improve the fairness and objectivity of my responses.  \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-14)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-15){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-16)\"instructor\":\"That's reassuring to hear.  Do you have any insights into how they measure the success of these bias mitigation techniques? \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-17)},\n[](https://docs.dria.co/factory/magpie#__codelineno-1-18){\n[](https://docs.dria.co/factory/magpie#__codelineno-1-19)\"responder\":\"That's a great question! Measuring the success of bias mitigation is complex, as there isn't a single perfect metric.  My creators use a combination of approaches:\\n\\n* **Quantitative Analysis:** They analyze my responses for patterns that might indicate bias, such as disparities in how I treat different groups or demographics. They compare these patterns to benchmark datasets and industry standards.\\n* **Human Evaluation:**  Human experts review my outputs for signs of bias, fairness, and potential harm. Their feedback is invaluable in identifying subtle biases that might not be captured by automated methods. \\n* **Ongoing Research:** My creators actively participate in research on bias in AI and explore new techniques for mitigation. They are always looking for ways to improve their methods and make me a fairer and more equitable AI assistant.  \\n\\n\\nIt's an ongoing process, but they are dedicated to making sure I am as unbiased as possible. \\n\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-20)}\n[](https://docs.dria.co/factory/magpie#__codelineno-1-21)],\n[](https://docs.dria.co/factory/magpie#__codelineno-1-22)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/magpie#__codelineno-1-23)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/magpie#references \"Permanent link\")\n\n*   [Distilabel MagPie](https://distilabel.argilla.io/latest/components-gallery/tasks/magpie/#generating-conversations-with-llama-3-8b-instruct-and-transformersllm)\n*   [Magpie: Alignment Data Synthesis from Scratch by Prompting Aligned LLMs with Nothing](https://arxiv.org/html/2406.08464v1)\n",
    "url": "https://docs.dria.co/factory/magpie"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: CLAIR - Dria Docs\n\nURL Source: https://docs.dria.co/factory/clair\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/clair#overview \"Permanent link\")\n-------------------------------------------------------------------------\n\nClair is a specialized task processor that takes a student's solution and provides corrections along with detailed reasoning. It's designed to act as an automated solution checker and feedback provider.\n\nInputs[\u00b6](https://docs.dria.co/factory/clair#inputs \"Permanent link\")\n---------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| task | str | The original task or question |\n| student\\_solution | str | The student's submitted solution to be evaluated |\n\nOutputs[\u00b6](https://docs.dria.co/factory/clair#outputs \"Permanent link\")\n-----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reasoning | str | Teacher's explanation for the corrections |\n| corrected\\_student\\_solution | str | The corrected version of the student's solution |\n| task | str | Original task (echoed from input) |\n| student\\_solution | str | Original student solution (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/clair#usage \"Permanent link\")\n\nCLAIR instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-0-1)from dria.factory import Clair\n[](https://docs.dria.co/factory/clair#__codelineno-0-2)\n[](https://docs.dria.co/factory/clair#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/clair#__codelineno-0-4)    name=\"clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-5)    description=\"A dataset for clair\",\n[](https://docs.dria.co/factory/clair#__codelineno-0-6)    schema=Clair.OutputSchema,\n[](https://docs.dria.co/factory/clair#__codelineno-0-7))\n[](https://docs.dria.co/factory/clair#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/clair#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/clair#__codelineno-1-1){\n[](https://docs.dria.co/factory/clair#__codelineno-1-2)\"reasoning\":\"##  Understanding Factorials\\n\\nFactorial (represented by the symbol \\\"!\\\") means multiplying a number by all the whole numbers less than it down to 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\\n\\n****: The provided code has a small syntax error.  In Python, colons (`:`) are used to indicate the start of a block of code, not as part of the return statement itself.\\n\\n\\n **\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-3)\"corrected_student_solution\":\"**:\\n\\n```python\\ndef factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1) \\n```\\n\\n\\n\\nLet me break down how this corrected code works:\\n\\n1. **Base Case:** The `if n == 0:` statement checks if the input number is 0. If it is, the function returns 1 because 0! is defined as 1.\\n\\n2. **Recursive Step:**  If `n` is not 0, the `else` block executes. It calculates the factorial by multiplying `n` with the factorial of `\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-4)\"task\":\"Write a function to calculate the factorial of a number.\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-5)\"student_solution\":\"def factorial(n):\\n    if n == 0:\\n        return 1\\n    else:\\n        return n * factorial(n-1)\",\n[](https://docs.dria.co/factory/clair#__codelineno-1-6)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/clair#__codelineno-1-7)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/clair#references \"Permanent link\")\n\n*   [Distilabel CLAIR](https://distilabel.argilla.io/latest/components-gallery/tasks/clair/) -[Anchored Preference Optimization and Contrastive Revisions: Addressing Underspecification in Alignment](https://arxiv.org/abs/2408.06266v1)\n*   [CLAIR\\_and\\_APO](https://github.com/ContextualAI/CLAIR_and_APO)\n",
    "url": "https://docs.dria.co/factory/clair"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: 404: NOT_FOUND\n\nURL Source: https://docs.dria.co/factory/text_classification\n\nWarning: Target URL returned error 404: Not Found\n\nMarkdown Content:\n**404**: NOT\\_FOUND Code: `NOT_FOUND` ID: `cle1::s9cdk-1735150923267-6856963ad560`\n\n[Read our documentation to learn more about this error.](https://vercel.com/docs/errors/platform-error-codes#not_found)\n",
    "url": "https://docs.dria.co/factory/text_classification"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Evaluate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/evaluate\n\nMarkdown Content:\nEvaluatePrediction[\u00b6](https://docs.dria.co/factory/evaluate#evaluateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/evaluate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nEvaluatePrediction is a singleton class that evaluates the quality and correctness of a predicted answer in relation to a given question and context. It provides detailed evaluation feedback rather than just a boolean result.\n\nInputs[\u00b6](https://docs.dria.co/factory/evaluate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| question | str | The original question |\n| context | str | The context against which to evaluate the prediction |\n\nOutputs[\u00b6](https://docs.dria.co/factory/evaluate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| question | str | The original question |\n| prediction | str | The predicted answer being evaluated |\n| evaluation | str | Detailed evaluation feedback |\n| model | str | The AI model used for evaluation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/evaluate#usage \"Permanent link\")\n\nEvaluatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-1)from dria.factory import EvaluatePrediction\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-2)\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-4)    name=\"EvaluatePrediction\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-5)    description=\"A dataset for prediction evaluation\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-6)    schema=EvaluatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-7))\n[](https://docs.dria.co/factory/evaluate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/evaluate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-1){\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-2)\"question\":\"Was Pope helpful in defense of Constantinople?\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-3)\"prediction\":\"Based on the information provided, it appears that Pope Nicholas V's efforts were unlikely to be significantly helpful in defending Constantinople. The fact that many Western rulers were wary of increasing papal control and had financial constraints due to their own internal conflicts and wars suggests that they would not have been able or willing to contribute substantially to a defense effort\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-4)\"evaluation\":\"[correct]\",\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/evaluate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/evaluate"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Score Complexity - Dria Docs\n\nURL Source: https://docs.dria.co/factory/complexity_scorer\n\nMarkdown Content:\nScoreComplexity[\u00b6](https://docs.dria.co/factory/complexity_scorer#scorecomplexity \"Permanent link\")\n---------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/complexity_scorer#overview \"Permanent link\")\n-------------------------------------------------------------------------------------\n\nScoreComplexity is a singleton that evaluates and assigns complexity scores to a list of instructions. It analyzes each instruction and provides a numerical score representing its complexity level.\n\nInputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#inputs \"Permanent link\")\n---------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of instructions to be scored for complexity |\n\nOutputs[\u00b6](https://docs.dria.co/factory/complexity_scorer#outputs \"Permanent link\")\n-----------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction being scored |\n| score | int | Numerical complexity score assigned to the instruction |\n| model | str | The AI model used for scoring |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/complexity_scorer#usage \"Permanent link\")\n\nScoreComplexity instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-1)from dria.factory import ScoreComplexity\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-2)\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-4)    name=\"score_complexity\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-5)    description=\"A dataset for instruction complexity scoring\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-6)    schema=ScoreComplexity.OutputSchema,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-7))\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n#### Expected output[\u00b6](https://docs.dria.co/factory/complexity_scorer#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-1)[\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-2){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-3)\"instruction\":\"Boil water in a kettle\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-4)\"score\":3,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-5)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-6)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-7){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-8)\"instruction\":\"Write a research paper on quantum physics\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-9)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-10)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-11)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-12){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-13)\"instruction\":\"Tie your shoelaces\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-14)\"score\":4,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-15)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-16)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-17){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-18)\"instruction\":\"Develop a machine learning algorithm\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-19)\"score\":5,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-20)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-21)},\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-22){\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-23)\"instruction\":\"Make a sandwich\",\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-24)\"score\":2,\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-25)\"model\":\"llama3.1:8b-instruct-fp16\"\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-26)}\n[](https://docs.dria.co/factory/complexity_scorer#__codelineno-1-27)]\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/complexity_scorer#references \"Permanent link\")\n\n*   [ComplexityScorer Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/complexityscorer)\n*   [What Makes Good Data for Alignment? A Comprehensive Study of Automatic Data Selection in Instruction Tuning](https://arxiv.org/abs/2312.15685)\n",
    "url": "https://docs.dria.co/factory/complexity_scorer"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Generate Graph - Dria Docs\n\nURL Source: https://docs.dria.co/factory/graph_builder\n\nMarkdown Content:\nGenerateGraph[\u00b6](https://docs.dria.co/factory/graph_builder#generategraph \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/graph_builder#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nGenerateGraph is a singleton template designed to extract ontological relationships from a given context. It processes text to identify concepts and their relationships, generating a graph-like structure of related terms and their connections.\n\nInputs[\u00b6](https://docs.dria.co/factory/graph_builder#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| context | str | The context from which to extract the ontology of terms |\n\nOutputs[\u00b6](https://docs.dria.co/factory/graph_builder#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| graph | GraphRelation | The generated graph relation containing node\\_1, node\\_2, and edge |\n| model | str | The AI model used for generation |\n\n### GraphRelation Schema[\u00b6](https://docs.dria.co/factory/graph_builder#graphrelation-schema \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| node\\_1 | str | A concept from extracted ontology |\n| node\\_2 | str | A related concept from extracted ontology |\n| edge | str | Relationship between the two concepts |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/graph_builder#usage \"Permanent link\")\n\nGenerateGraph instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-1)from dria.factory import GenerateGraph\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-2)\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-4)    name=\"generate_graph\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-5)    description=\"A dataset for ontology extraction\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-6)    schema=GenerateGraph.OutputSchema,\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-7))\n[](https://docs.dria.co/factory/graph_builder#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/graph_builder#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-1){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-2)\"graph\":[\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-3){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-4)\"edge\":\"Machine learning is a subfield within the broader field of Artificial Intelligence.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-5)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-6)\"node_2\":\"machine learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-7)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-8){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-9)\"edge\":\"Deep learning is another subfield of Artificial Intelligence that focuses on deep neural networks.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-10)\"node_1\":\"Artificial Intelligence\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-11)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-12)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-13){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-14)\"edge\":\"Deep learning is a specific approach within machine learning that uses deep neural networks to model complex patterns in data.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-15)\"node_1\":\"machine learning\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-16)\"node_2\":\"deep learning\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-17)},\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-18){\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-19)\"edge\":\"Neural networks are crucial components used in the construction of deep learning systems.\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-20)\"node_1\":\"neural networks\",\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-21)\"node_2\":\"deep learning systems\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-22)}\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-23)],\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-24)\"model\":\"qwen2.5:32b-instruct-fp16\"\n[](https://docs.dria.co/factory/graph_builder#__codelineno-1-25)}\n```\n",
    "url": "https://docs.dria.co/factory/graph_builder"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Evolve Instruction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/instruction_evolution\n\nMarkdown Content:\nEvolveInstruct[\u00b6](https://docs.dria.co/factory/instruction_evolution#evolveinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/instruction_evolution#overview \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nEvolveInstruct is a singleton template designed to mutate or evolve prompts in various ways. It provides different mutation strategies to transform an original prompt into a new version while maintaining its core intent. The mutations can add constraints, deepen complexity, make prompts more concrete, increase reasoning requirements, or switch topics while maintaining similar difficulty levels.\n\nInputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#inputs \"Permanent link\")\n-------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The original prompt to be mutated |\n| mutation\\_type | MutationType | The type of mutation to apply (one of: FRESH\\_START, ADD\\_CONSTRAINTS, DEEPEN, CONCRETIZE, INCREASE\\_REASONING, SWITCH\\_TOPIC) |\n\nOutputs[\u00b6](https://docs.dria.co/factory/instruction_evolution#outputs \"Permanent link\")\n---------------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| mutated\\_prompt | str | The transformed version of the original prompt |\n| original\\_prompt | str | The input prompt (echoed from input) |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/instruction_evolution#usage \"Permanent link\")\n\nEvolveInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-1)from dria.factory import EvolveInstruct\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-2)\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-4)    name=\"evolve_instruct\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-5)    description=\"A dataset for prompt evolution\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-6)    schema=EvolveInstruct.OutputSchema,\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-7))\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nThe mutation types available are: - FRESH\\_START: Creates a new question using specified keywords - ADD\\_CONSTRAINTS: Adds additional requirements to the original prompt - DEEPEN: Increases the complexity and scope of the prompt - CONCRETIZE: Makes the prompt more specific and concrete - INCREASE\\_REASONING: Transforms the prompt to require multi-step reasoning - SWITCH\\_TOPIC: Changes the topic while maintaining similar difficulty and domain\n\n### Expected output[\u00b6](https://docs.dria.co/factory/instruction_evolution#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-1){\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-2)\"mutated_prompt\":\"**Discuss the intricate process of photosynthesis, delving into its two main stages (light-dependent and light-independent reactions).  Explain how sunlight is captured, water is split, and carbon dioxide is fixed to produce glucose, the primary energy source for plants. Describe the role of chlorophyll and other pigments in absorbing light energy, and outline the significance of photosynthesis for life on Earth, including its impact on oxygen production and the global carbon cycle.** \\n\\n\\nThis new prompt:\\n\\n* **Increases depth:** It asks for a more detailed explanation, including the two stages of photosynthesis and their specific mechanisms.\\n* **Increases breadth:**  It expands the scope to include the roles of chlorophyll, pigments, and the broader ecological significance of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-3)\"prompt\":\"Explain the concept of photosynthesis.\",\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-4)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/instruction_evolution#__codelineno-1-5)}\n```\n\n#### References[\u00b6](https://docs.dria.co/factory/instruction_evolution#references \"Permanent link\")\n\n*   [EvolInstruct Distilabel](https://distilabel.argilla.io/latest/components-gallery/tasks/evolinstruct/#input-output-columns)\n*   [WizardLM: Empowering Large Language Models to Follow Complex Instructions](https://arxiv.org/abs/2304.12244)\n*   [GitHub: h2oai/h2o-wizardlm](https://github.com/h2oai/h2o-wizardlm)\n",
    "url": "https://docs.dria.co/factory/instruction_evolution"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Generate Code - Dria Docs\n\nURL Source: https://docs.dria.co/factory/code_generation\n\nMarkdown Content:\nGenerateCode[\u00b6](https://docs.dria.co/factory/code_generation#generatecode \"Permanent link\")\n-------------------------------------------------------------------------------------------\n\n### Overview[\u00b6](https://docs.dria.co/factory/code_generation#overview \"Permanent link\")\n\nThis implementation provides two Singleton classes for code generation and iteration: `GenerateCode` and `IterateCode`. These classes are designed to generate and iterate code based on given instructions in specified programming languages.\n\n> \u26a0\ufe0f `GenerateCode` works best with coder models. You can use them with `Model.CODER`or specifying with `Model.QWEN2_5_CODER_1_5B`.\n\n### Inputs[\u00b6](https://docs.dria.co/factory/code_generation#inputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The instruction to generate code for |\n| language | str | The programming language to generate code for |\n\n### Outputs[\u00b6](https://docs.dria.co/factory/code_generation#outputs \"Permanent link\")\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instruction | str | The original instruction (echoed from input) |\n| language | str | The programming language used |\n| code | str | The generated code |\n| model | str | The AI model used for generation |\n\n### Usage[\u00b6](https://docs.dria.co/factory/code_generation#usage \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-1)from dria.factory import GenerateCode\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-2)\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-3)generator = GenerateCode(\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-4)    instruction=\"Write a function to calculate fibonacci numbers\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-5)    language=\"python\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-0-6))\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/code_generation#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-1){\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-2)\"instruction\":\"Write a function to calculate the factorial of a number\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-3)\"language\":\"python\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-4)\"code\":\"def factorial(n):\\n    \\\"\\\"\\\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    Args:\\n    n (int): A non-negative integer whose factorial is to be calculated.\\n    \\n    Returns:\\n    int: The factorial of the input number.\\n    \\n    Raises:\\n    ValueError: If n is negative.\\n    \\\"\\\"\\\"\\n    # Check if the input is a non-negative integer\\n    if not isinstance(n, int) or n < 0:\\n        raise ValueError(\\\"Input must be a non-negative integer.\\\")\\n    \\n    # Initialize the result to 1 (since 0! = 1)\\n    result = 1\\n    \\n    # Calculate the factorial using a loop\\n    for i in range(1, n + 1):\\n        result *= i\\n    \\n    return result\\n\\n# Example usage:\\ntry:\\n    print(factorial(5))  # Output: 120\\nexcept ValueError as e:\\n    print(e)\",\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-5)\"model\":\"qwen2.5-coder:1.5b\"\n[](https://docs.dria.co/factory/code_generation#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/code_generation"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Validate Prediction - Dria Docs\n\nURL Source: https://docs.dria.co/factory/validate\n\nMarkdown Content:\nValidatePrediction[\u00b6](https://docs.dria.co/factory/validate#validateprediction \"Permanent link\")\n------------------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/validate#overview \"Permanent link\")\n----------------------------------------------------------------------------\n\nValidatePrediction is a singleton class that validates whether a predicted answer matches a correct answer by performing contextual and semantic comparison. It provides a boolean validation result along with the original prediction and correct answer.\n\nInputs[\u00b6](https://docs.dria.co/factory/validate#inputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The predicted answer to be evaluated |\n| correct\\_answer | str | The correct answer to compare against |\n\nOutputs[\u00b6](https://docs.dria.co/factory/validate#outputs \"Permanent link\")\n--------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prediction | str | The original predicted answer |\n| correct\\_answer | str | The original correct answer |\n| validation | bool | Boolean result indicating if prediction matches correct answer |\n| model | str | The AI model used for validation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/validate#usage \"Permanent link\")\n\nValidatePrediction instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-0-1)from dria.factory import ValidatePrediction\n[](https://docs.dria.co/factory/validate#__codelineno-0-2)\n[](https://docs.dria.co/factory/validate#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/validate#__codelineno-0-4)    name=\"ValidatePrediction\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-5)    description=\"A dataset for prediction validation\",\n[](https://docs.dria.co/factory/validate#__codelineno-0-6)    schema=ValidatePrediction.OutputSchema,\n[](https://docs.dria.co/factory/validate#__codelineno-0-7))\n[](https://docs.dria.co/factory/validate#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/validate#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/validate#__codelineno-1-1){\n[](https://docs.dria.co/factory/validate#__codelineno-1-2)\"prediction\":\"Capital france is Berlin.\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-3)\"correct_answer\":\"Capital of France is Paris\",\n[](https://docs.dria.co/factory/validate#__codelineno-1-4)\"validation\":false,\n[](https://docs.dria.co/factory/validate#__codelineno-1-5)\"model\":\"anthropic/claude-3-5-haiku-20241022:beta\"\n[](https://docs.dria.co/factory/validate#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/validate"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: SemanticTriplet - Dria Docs\n\nURL Source: https://docs.dria.co/factory/semantic_triplet\n\nMarkdown Content:\n`SemanticTriplet` is a `Singleton` task that generates a JSON object containing three textual units with specified semantic similarity scores.\n\n#### Inputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#inputs \"Permanent link\")\n\n*   unit (`str`): The type of textual unit to generate (e.g., \"sentence\", \"paragraph\").\n*   language (`str`): The language in which the units should be written.\n*   high\\_score (`int`): The similarity score between S1 and S2 (1 to 5).\n*   low\\_score (`int`): The similarity score between S1 and S3 (1 to 5).\n*   difficulty (`str`): The education level required to understand the units (e.g., \"college\", \"high school\").\n\n#### Outputs[\u00b6](https://docs.dria.co/factory/semantic_triplet#outputs \"Permanent link\")\n\n*   semantic\\_triple (`dict`): A JSON object containing three textual units (S1, S2, S3) with specified semantic similarity scores.\n\n### Example[\u00b6](https://docs.dria.co/factory/semantic_triplet#example \"Permanent link\")\n\nGenerate a semantic triplet with specified parameters. This example uses the `GEMMA2_9B_FP16` model.\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-1)import os\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-3)from dria.factory import SemanticTriplet\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-6)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-8)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-9)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-10)async def evaluate():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-11)    semantic_triplet = SemanticTriplet()\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-12)    res = await dria.execute(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-13)        Task(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-14)            workflow=semantic_triplet.workflow(\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-15)                unit=\"sentence\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-16)                language=\"English\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-17)                high_score=4,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-18)                low_score=2,\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-19)                difficulty=\"college\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-20)            ),\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-21)            models=[Model.GEMINI_15_FLASH],\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-22)        )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-23)    )\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-24)    return semantic_triplet.parse_result(res)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-25)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-26)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-27)def main():\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-28)    result = asyncio.run(evaluate())\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-29)    print(result)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-30)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-31)\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-32)if __name__ == \"__main__\":\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-0-33)    main()\n```\n\nExpected output\n\n```\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-1){\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-2)\"S1\":\"The intricate dance of quantum fluctuations within the cosmos is a fascinating phenomenon that has garnered significant attention from physicists.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-3)\"S2\":\"The dynamic interplay between chaos theory and cosmology reveals a profound understanding of the universe's underlying mechanisms.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-4)\"S3\":\"In the realm of relativity, the curvature of spacetime is a fundamental concept that underpins our comprehension of the cosmos.\",\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-5)\"model\":\"llama3.2:3b\"\n[](https://docs.dria.co/factory/semantic_triplet#__codelineno-1-6)}\n```\n",
    "url": "https://docs.dria.co/factory/semantic_triplet"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Self-Instruct - Dria Docs\n\nURL Source: https://docs.dria.co/factory/self_instruct\n\nMarkdown Content:\nSelfInstruct[\u00b6](https://docs.dria.co/factory/self_instruct#selfinstruct \"Permanent link\")\n-----------------------------------------------------------------------------------------\n\nOverview[\u00b6](https://docs.dria.co/factory/self_instruct#overview \"Permanent link\")\n---------------------------------------------------------------------------------\n\nSelfInstruct is a singleton template designed to generate user queries for AI applications based on specific criteria and context. It automates the process of creating relevant instructions or queries that can be used to test or train AI systems.\n\nInputs[\u00b6](https://docs.dria.co/factory/self_instruct#inputs \"Permanent link\")\n-----------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| num\\_instructions | conint(ge=1) | The number of user queries to generate |\n| criteria\\_for\\_query\\_generation | str | The criteria for generating the queries |\n| application\\_description | str | A description of the AI application |\n| context | str | The context to which the queries should be applicable |\n\nOutputs[\u00b6](https://docs.dria.co/factory/self_instruct#outputs \"Permanent link\")\n-------------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| instructions | List\\[str\\] | List of generated instructions |\n| model | str | The AI model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/self_instruct#usage \"Permanent link\")\n\nSelfInstruct instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-1)from dria.factory import SelfInstruct\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-2)\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-4)    name=\"SelfInstruct\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-5)    description=\"A dataset for self-instructed query generation\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-6)    schema=SelfInstruct.OutputSchema,\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-7))\n[](https://docs.dria.co/factory/self_instruct#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output[\u00b6](https://docs.dria.co/factory/self_instruct#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-1){\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-2)\"instructions\":[\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-3)\"Prioritize my upcoming deadlines, considering project dependencies. \",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-4)\"Can you schedule a meeting with the marketing team for next week to discuss the Q3 campaign?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-5)\"Generate a comprehensive list of actionable steps required for completing the client proposal.\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-6)\"What tasks are currently assigned to me that are due within the next 7 days?\",\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-7)\"Remind me to follow up with John about the budget approval at 2 PM tomorrow.\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-8)],\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-9)\"model\":\"gemma2:9b-instruct-fp16\"\n[](https://docs.dria.co/factory/self_instruct#__codelineno-1-10)}\n```\n",
    "url": "https://docs.dria.co/factory/self_instruct"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Simple - Dria Docs\n\nURL Source: https://docs.dria.co/factory/simple\n\nMarkdown Content:\nOverview[\u00b6](https://docs.dria.co/factory/simple#overview \"Permanent link\")\n--------------------------------------------------------------------------\n\nSimple is a singleton template implementation for basic text generation. It takes a prompt as input and generates text using a specified model, providing a straightforward workflow for text generation tasks.\n\nInputs[\u00b6](https://docs.dria.co/factory/simple#inputs \"Permanent link\")\n----------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | Input prompt for generation |\n\nOutputs[\u00b6](https://docs.dria.co/factory/simple#outputs \"Permanent link\")\n------------------------------------------------------------------------\n\n| Field | Type | Description |\n| --- | --- | --- |\n| prompt | str | The prompt used to generate text |\n| generation | str | Generated text |\n| model | str | Model used for generation |\n\n#### Usage[\u00b6](https://docs.dria.co/factory/simple#usage \"Permanent link\")\n\nSimple instance can be used in data generation as follows:\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-0-1)from dria.factory import Simple\n[](https://docs.dria.co/factory/simple#__codelineno-0-2)\n[](https://docs.dria.co/factory/simple#__codelineno-0-3)my_dataset = DriaDataset(\n[](https://docs.dria.co/factory/simple#__codelineno-0-4)    name=\"Simple\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-5)    description=\"A dataset for simple text generation\",\n[](https://docs.dria.co/factory/simple#__codelineno-0-6)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/factory/simple#__codelineno-0-7))\n[](https://docs.dria.co/factory/simple#__codelineno-0-8)generator = DatasetGenerator(dataset=my_dataset)\n```\n\n### Expected output:[\u00b6](https://docs.dria.co/factory/simple#expected-output \"Permanent link\")\n\n```\n[](https://docs.dria.co/factory/simple#__codelineno-1-1){\n[](https://docs.dria.co/factory/simple#__codelineno-1-2)\"prompt\":\"Hey there!\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-3)\"generation\":\"Hello! How can I assist you today?\",\n[](https://docs.dria.co/factory/simple#__codelineno-1-4)\"model\":\"qwen2.5:7b-instruct-fp16\"\n[](https://docs.dria.co/factory/simple#__codelineno-1-5)}\n```\n",
    "url": "https://docs.dria.co/factory/simple"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Patient dialogues - Dria Docs\n\nURL Source: https://docs.dria.co/cookbook/patient_dialogues\n\nMarkdown Content:\nPatient dialogues - Dria Docs\n=============== \n\n \n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nPatient dialogues\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nPatient dialogues\n=================\n\n* * *\n\ncategories: - Applied AI description: Explore various patient dialogues and interactions that enhance understanding in healthcare settings. tags: - patient care - healthcare communication - dialogue examples - medical interaction - patient engagement\n\n* * *\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/patient_dialogues"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Synthetic Preference Data Generation Using Dria\n\nURL Source: https://docs.dria.co/cookbook/preference_data\n\nMarkdown Content:\nSynthetic Preference Data Generation Using Dria - Dria Docs\n=============== \n\n \n\n[Skip to content](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria)\n\n[](https://docs.dria.co/ \"Dria Docs\")\n\nDria Docs\n\nSynthetic Preference Data Generation Using Dria\n\n \n\nInitializing search\n\n [](https://docs.dria.co/ \"Dria Docs\")Dria Docs\n\n*   [ ]  Getting Started\n    \n    Getting Started\n    \n    *   [What is Dria?](https://docs.dria.co/)\n    *   [Installation](https://docs.dria.co/installation/)\n    *   [Quickstart](https://docs.dria.co/quickstart/)\n    *   [Run a Node (Optional)](https://docs.dria.co/node/)\n    \n*   [ ]  Datasets\n    \n    Datasets\n    \n    *   [Create](https://docs.dria.co/how-to/dria_datasets/)\n    *   [Exports](https://docs.dria.co/how-to/dria_datasets_exports/)\n    \n*   [ ]  Data Generation\n    \n    Data Generation\n    \n    *   [Generator](https://docs.dria.co/how-to/data_generators/)\n    *   [Prompts](https://docs.dria.co/how-to/prompters/)\n    *   [Singletons](https://docs.dria.co/how-to/singletons/)\n    *   [Selecting Models](https://docs.dria.co/how-to/selecting_models/)\n    *   [Data Enrichment](https://docs.dria.co/how-to/data_enrichment/)\n    \n*   [ ]  Advanced\n    \n    Advanced\n    \n    *   [Complex Workflows](https://docs.dria.co/how-to/workflows/)\n    *   [Functions](https://docs.dria.co/how-to/functions/)\n    *   [Structured Outputs](https://docs.dria.co/how-to/structured_outputs/)\n    \n*   [ ]  Factory\n    \n    Factory\n    \n    *   [Simple](https://docs.dria.co/factory/simple/)\n    *   [CLAIR](https://docs.dria.co/factory/clair/)\n    *   [Generate Code](https://docs.dria.co/factory/code_generation/)\n    *   [Iterate Code](https://docs.dria.co/factory/iterate_code/)\n    *   [Evolve Complexity](https://docs.dria.co/factory/evolve_complexity/)\n    *   [Score Complexity](https://docs.dria.co/factory/complexity_scorer/)\n    *   [Evolve Instruction](https://docs.dria.co/factory/instruction_evolution/)\n    *   [Evolve Quality](https://docs.dria.co/factory/quality_evolution/)\n    *   [Generate Graph](https://docs.dria.co/factory/graph_builder/)\n    *   [MagPie](https://docs.dria.co/factory/magpie/)\n    *   [Instruction Backtranslation](https://docs.dria.co/factory/instruction_backtranslation/)\n    *   [MultiHopQA](https://docs.dria.co/factory/multihopqa/)\n    *   [Self-Instruct](https://docs.dria.co/factory/self_instruct/)\n    *   [ ]  Model-as-a-Judge\n        \n        Model-as-a-Judge\n        \n        *   [Evaluate Prediction](https://docs.dria.co/factory/evaluate/)\n        *   [Validate Prediction](https://docs.dria.co/factory/validate/)\n        \n    *   [List Extender](https://docs.dria.co/factory/list_extender/)\n    *   [Persona Pipeline](https://docs.dria.co/factory/persona/)\n    *   [Sub-Topic Pipeline](https://docs.dria.co/factory/subtopic/)\n    *   [Search Pipeline](https://docs.dria.co/factory/search/)\n    *   [QA Pipeline](https://docs.dria.co/factory/qa/)\n    \n*   [ ]  Resource\n    \n    Resource\n    \n    *   [Available Models](https://docs.dria.co/how-to/models/)\n    \n\nSynthetic Preference Data Generation Using Dria[\u00b6](https://docs.dria.co/cookbook/preference_data#synthetic-preference-data-generation-using-dria \"Permanent link\")\n==================================================================================================================================================================\n\nCopyright \u00a9 2023 FirstBatch Inc.\n\nMade with [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n",
    "url": "https://docs.dria.co/cookbook/preference_data"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Singletons - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/singletons\n\nMarkdown Content:\nSingletons are pre-built task templates that perform specific functions using a standardized structure. Each singleton is designed as a single instance that handles a specific task using Pydantic models for input validation and output formatting.\n\n### Factory[\u00b6](https://docs.dria.co/how-to/singletons#factory \"Permanent link\")\n\nDria\u2019s Factory offers various ready-to-use Singletons for different scenarios, easily compatible with a `DatasetGenerator` object. For more specific needs, however, creating your own Singleton is recommended.\n\nHere's a basic example of how to use a singleton. Code below uses the `Simple` singleton from library which takes a prompt and executes it.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-3)import asyncio\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-5)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-6)    name=\"simple\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-7)    description=\"A simple dataset\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-8)    schema=Simple.OutputSchema,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-9))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-10)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-11)\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-12)instructions = [\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-13)    {\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-14)        \"prompt\": \"Write a haiku about open source AI.\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-15)    },\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-16)]\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-17)asyncio.run(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-18)    generator.generate(\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-19)        instructions=instructions,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-20)        singletons=Simple,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-21)        models=Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-22)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-23))\n[](https://docs.dria.co/how-to/singletons#__codelineno-0-24)my_dataset.to_json()\n```\n\nOutput is:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-2){\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-3)\"prompt\":\"Write a haiku about open source AI.\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-4)\"generation\":\"Code for all to see free\\nSharing wisdom, knowledge flows\\nHumanity's gift back\",\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-5)\"model\":\"meta-llama\\/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/singletons#__codelineno-1-7)]\n```\n\nWriting Singletons[\u00b6](https://docs.dria.co/how-to/singletons#writing-singletons \"Permanent link\")\n-------------------------------------------------------------------------------------------------\n\nDria's factory is limited, therefore writing a Singleton can adapt Dria Network to any problem at hand.\n\n### Basic Structure[\u00b6](https://docs.dria.co/how-to/singletons#basic-structure \"Permanent link\")\n\nA singleton consists of three main components:\n\n1.  Input fields (using Pydantic Fields)\n2.  Output schema (using Pydantic BaseModel)\n3.  Workflow and callback methods\n\nWe can start by importing the necessary libraries and defining the input fields and output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-1)from dria.factory.utilities import get_abs_path\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-2)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/singletons#__codelineno-2-3)from dria.models import TaskResult\n```\n\nFirst step is to create a class that inherits from `SingletonTemplate` and define the input fields.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-3-6)    )\n```\n\n`SingletonTemplate` is a base class that provides the necessary functionality to create pre-built tasks. Next step is to create the output schema.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-1)class ValidationOutput(BaseModel):\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-2)    prediction: str = Field(..., description=\"The prediction result.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-3)    correct_answer: str = Field(..., description=\"The correct answer.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-4)    validation: bool = Field(..., description=\"Validation result (True/False)\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-4-5)    model: str = Field(..., description=\"Model used for validation\")\n```\n\nOutput schema is attached to the singleton with built-in `OutputSchema` attribute.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-1)class ValidatePrediction(SingletonTemplate):\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-2)    # Input fields\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-3)    prediction: str = Field(..., description=\"The predicted answer to be evaluated\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-4)    correct_answer: str = Field(\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-5)        ..., description=\"The correct answer to compare against\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-6)    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-8)    # Output schema\n[](https://docs.dria.co/how-to/singletons#__codelineno-5-9)    OutputSchema = ValidationOutput\n```\n\nSingleton class has two abstrat methods that need to be implemented: `workflow` and `callback`.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-1)def workflow(self) -> Workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-6-2)def callback(self, result: List[TaskResult]) -> List[ValidationOutput]\n```\n\nSee [workflows](https://docs.dria.co/workflows/) for more information on how to implement workflows.\n\nThe `workflow` method defines the task to be executed and `callback` method processes the result.\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-5)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-7)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-11)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-17)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-18)        )\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-19)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-20)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-21)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-22)        builder.flow(flow)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-23)\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-24)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-25)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-7-26)        return builder.build()\n```\n\nSince Dria supports multiple models, [structured outputs](https://docs.dria.co/structured_outputs/) are not forced. But can be added through `schema` field of `generative_step`. If not, the format and parsing is up to the prompt you provided to the task.\n\nThis is the implemented prompt for `Validator`\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-1)You will be given a predicted answer to a question. Your task is to reason with your existing knowledge to evaluate if the predicted answer is correct or not.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-2)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-3)Here is the predicted answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-4)<prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-5){{prediction}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-6)</prediction>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-8)Here is the question answer:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-9)<question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-10){{correct_answer}}\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-11)</question>\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-12)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-13)To complete this task:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-14)1. Carefully read both the prediction and the correct answer.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-15)2. Compare the two answers, focusing on their semantic meaning and contextual relevance.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-16)3. Determine if the predicted answer conveys the same core information and is contextually appropriate, even if the wording is different.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-17)4. Ignore minor differences in phrasing, word choice, or additional details as long as the main point is correct.\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-18)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-19)Output your decision as follows:\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-20)-If the predicted answer is contextually and semantically correct, output only the word \"true\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-21)-If the predicted answer is not contextually or semantically correct, output only the word \"false\" (without quotes).\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-22)\n[](https://docs.dria.co/how-to/singletons#__codelineno-8-23)Do not provide any explanation or justification for your decision. Your entire response should consist of a single word: either \"true\" or \"false\".\n```\n\nBased on this prompt, we add a `callback` method:\n\n```\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-1)    def callback(self, result: List[TaskResult]) -> List[ValidationOutput]:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-3)        Parse the results into validated ValidationOutput objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-4)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-5)        Args:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-6)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-7)\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-8)        Returns:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-9)            List[ValidationOutput]: List of validated outputs\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-10)        \"\"\"\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-11)        outputs = []\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-12)        for r in result:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-13)            if r.result.lower() == \"true\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-14)                outputs.append(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-15)                    ValidationOutput(\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-16)                        prediction=self.prediction,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-17)                        correct_answer=self.correct_answer,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-18)                        validation=True,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-19)                        model=r.model,\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-20)                    )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-21)                )\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-22)            elif r.result.lower() == \"false\":\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-23)                outputs.append(ValidationOutput(validation=False, model=r.model))\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-24)            else:\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-25)                raise ValueError(\"The result is not a boolean value.\")\n[](https://docs.dria.co/how-to/singletons#__codelineno-9-26)        return outputs\n```\n",
    "url": "https://docs.dria.co/how-to/singletons"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Creating Pipelines - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/pipelines\n\nMarkdown Content:\nPipelines are used to generate complex outputs by combining multiple [workflows](https://docs.dria.co/workflows/). Key feature is to utilize asynchronous processing to execute multiple workflows in parallel and connect them in a sequence.\n\n#### Understanding Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#understanding-pipelines \"Permanent link\")\n\nPipelines are a sequence of workflows that are executed in a specific order. Each workflow can have multiple steps, and the output of one step can be used as input for the next step. Let's think of a Question Answer pipeline where the first step is to generate a question and the second step is to find the answer to the question.\n\nNormally in a synchronous environment, the output of the first step is used as input for the second step. _But what if we need to create 100 questions and find their answers?_\n\nWe need Dria network to execute each instruction in parallel yet to create answers, we need the questions.\n\n#### Example Flow: Generating QA Pairs from Topics[\u00b6](https://docs.dria.co/how-to/pipelines#example-flow-generating-qa-pairs-from-topics \"Permanent link\")\n\nNvidia's [Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct](https://github.com/NVIDIA/NeMo-Curator/blob/main/tutorials/synthetic-preference-data/synthetic_preference_data_generation_llama_3_1_405b.ipynb) is a good example of a pipeline that generates QA pairs from topics. In layman's terms: 1. Generate topics from seed topics. 2. Generate questions from topics. 3. Generate answers from questions.\n\nAn overview of the pipeline is as follows:\n\n```\nflowchart LR\n    SeedTopic[Seed Topic] --> Topic1[Topic 1]\n    SeedTopic --> Topic2[Topic 2]\n    SeedTopic --> Topic3[Topic 3]\n    SeedTopic --> Topic4[Topic 4]\n\n    Topic1 --> Q1(( )):::node\n    Topic2 --> Q2(( )):::node\n    Topic3 --> Q3(( )):::node\n    Topic4 --> Q4(( )):::node\n\n    Q1 -- question --> Aggregate[Aggregate]\n    Q2 -- question --> Aggregate\n    Q3 -- question --> Aggregate\n    Q4 -- question --> Aggregate\n\n    Aggregate --> Scatter[Scatter]\n\n    Scatter --> A1(( )):::node\n    Scatter --> A2(( )):::node\n    Scatter --> A3(( )):::node\n    Scatter --> A4(( )):::node\n\n    A1 -- Answer --> Result[Result]\n    A2 -- Answer --> Result\n    A3 -- Answer --> Result\n    A4 -- Answer --> Result\n```\n\nCheck our [cookbook](https://docs.dria.co/cookbook/preference_data/) for implementing the `Synthetic Preference Data Generation Using Meta's Llama 3.1 405B Instruct` with Dria.\n\n* * *\n\n#### Implementing Pipelines[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-pipelines \"Permanent link\")\n\nThe `Pipeline` class is used to define the list of workflows, their corresponding models and the input data.\n\nA pipeline consists of Steps, which are instances of `StepTemplate`.\n\nLet's define a two-step pipeline by implementing `FirstPipelineStep` and `SecondPipelineStep`. Steps must implement the `create_workflow` abstractmethod which returns a `Workflow` object.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-4)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-5)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-0-6)        pass\n```\n\n##### Implementing the first step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-first-step \"Permanent link\")\n\nFor clarification, let's implement the `FirstPipelineStep` class to create variations for an instruction.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-1)from dria_workflows import *\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-2)from dria.pipelines import StepTemplate\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-5)class FirstPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-6)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-8)        # Create a workflow builder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-9)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-10)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-11)        # Add a step to your workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-12)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-13)            id=\"generate_variations\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-14)            prompt=\"Rewrite 5 variations of given instruction by making small changes. Instruction: {{instruction}}. Output a single Python list for new instructions, and nothing else. New instructions:\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-15)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-16)            outputs=[Write.new(\"variations\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-17)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-18)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-19)        # Define flow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-20)        flow = [Edge(source=\"generate_variations\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-21)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-22)        # Build workflow\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-24)        builder.set_return_value(\"variations\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-25)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-1-26)        return workflow\n```\n\n`FirstPipelineStep` generates 5 variations of the given instruction.\n\nInstruction:\n\n> `Write a haiku`\n\nOutput:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-2)\"write a Japanese-style haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-3)\"compose a three-line poem\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-4)\"craft a traditional tanka\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-5)\"create a nature-inspired haiku\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-6)\"draft a short, 5-7-5 syllable poem\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-2-7)]\n```\n\n##### Implementing the second step[\u00b6](https://docs.dria.co/how-to/pipelines#implementing-the-second-step \"Permanent link\")\n\nFor the second step, `SecondPipelineStep`, we will use the output of the first step as input. Second step will execute each instruction and return the output.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-1)class SecondPipelineStep(StepTemplate):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-2)    def create_workflow(self, instruction: str) -> Workflow:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-3)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-4)        builder = WorkflowBuilder(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-5)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-6)        builder.generative_step(\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-7)            id=\"execute_instruction\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-8)            path=\"{{instruction}}\",\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-9)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-10)            outputs=[Write.new(\"output\")],\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-11)        )\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-12)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-13)        flow = [Edge(source=\"execute_instruction\", target=\"_end\")]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-14)        builder.flow(flow)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-15)        builder.set_return_value(\"output\")\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-16)        workflow = builder.build()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-3-17)        return workflow\n```\n\nCreated steps are connected to a pipeline through `PipelineBuilder`. `BasicPipeline` has two steps: `FirstPipelineStep` and `SecondPipelineStep` which are instances of `StepTemplate`.\n\nWe use `<<` notation to add multiple steps to the pipeline and determine the order of execution.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-2)from dria.pipelines import Pipeline, PipelineBuilder\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-3)class BasicPipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-4)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-5)    def __init__(self, dria: Dria):\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-6)        self.pipeline = PipelineBuilder(dria)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-7)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-8)    def build(self, instruction: str) -> Pipeline:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-9)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-10)        self.pipeline.input(instruction=instruction)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-11)        self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n[](https://docs.dria.co/how-to/pipelines#__codelineno-4-12)        return self.pipeline.build()\n```\n\nInstead looping through variations generated in the first step, and executing them one-by-one, we use special `scatter` callback to execute them in parallel. Pipeline will automatically handle the parallel execution of the steps by parsing the json output and sending each instruction as a seperate task to network. In order to achieve this, `FirstPipelineStep` must output a valid JSON deserializable list.\n\nFinally we set the input instruction using the `input` method. and build the pipeline\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/pipelines#inputs \"Permanent link\")\n\nPipelines can have multiple inputs. Inputs are defined using the `input` method of the `PipelineBuilder` class.\n\nThere are pratically two ways to define inputs:\n\n##### Using \\*\\*kwargs:[\u00b6](https://docs.dria.co/how-to/pipelines#using-kwargs \"Permanent link\")\n\nThis is useful if pipeline has a single input for the start.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-5-1)self.pipeline.input(instruction=instruction)\n```\n\n##### Using lists:[\u00b6](https://docs.dria.co/how-to/pipelines#using-lists \"Permanent link\")\n\nThis is useful if pipeline has multiple inputs as starting point. For a list of instructions:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-6-1)[\"Write a haiku\",\"Write a sonnet\",\"Write a limerick\"]\n```\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-7-1)self.pipeline.input([{\"instruction\": instruction} for instruction in instructions])\n```\n\n#### Callbacks[\u00b6](https://docs.dria.co/how-to/pipelines#callbacks \"Permanent link\")\n\nCallbacks are executed after a step is finished. Dria provides three built-in callbacks:\n\n1.  `scatter`: 1-N mapping of input to output. Used to execute multiple tasks in parallel. Suitable when a step output is a list.\n2.  `broadcast`: 1-N mapping of input to output. Used to duplicate the input to multiple tasks. Suitable when a step output is a single value.\n3.  `aggregate`: N-1 mapping of input to output. Used to combine multiple outputs into a single output. Suitable when a step output is a list.\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-8-1)self.pipeline << FirstPipelineStep().scatter() << SecondPipelineStep()\n```\n\n_Custom Callbacks_: You can define custom callbacks by implementing the `callback` method for `StepTemplate` class.\n\nCustom callback takes a `Step` object as input and returns a `TaskInput` or `List[TaskInput]`. Custom callbacks enable design of custom input-output matching between steps of the pipeline. Here is an example of a custom callback:\n\n```\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-1)def callback(self, step: \"Step\") -> Union[List[TaskInput], TaskInput]:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-2)\"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-3)    Only to use as the last callback\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-4)    Args:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-5)        step:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-6)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-7)    Returns:\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-8)\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-9)    \"\"\"\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-10)    # flatten list of lists\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-11)    outputs = [parse_json(o.result) for o in step.output]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-12)    flattened = [item for sublist in outputs for item in sublist]\n[](https://docs.dria.co/how-to/pipelines#__codelineno-9-13)    return TaskInput(**{\"subtopics\": flattened})\n```\n\nCallback above flattens the list of lists and returns a single `TaskInput` object. An important point to note is that custom callbacks keys should match the keys of the input of the next step in the pipeline. For our case, the next step should have a key `subtopics` in its input.\n",
    "url": "https://docs.dria.co/how-to/pipelines"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Custom Workflows within Dria Network\n\nURL Source: https://docs.dria.co/how-to/workflows\n\nMarkdown Content:\nWorkflows are the instruction sets within a `Task`, allowing Dria nodes to breakdown complex tasks into smaller tasks. There maybe cases Singletons and Pipelines won't cover all the requirements of a task, in such cases, custom workflows come in handy. Dria SDK provides a way to create workflows through `dria_workflows` package.\n\nA workflow consists of steps that interact with LLMs and I/O memory. Each step reads inputs from memory, generates text, and writes outputs back to memory. Workflows enable inter-step communication via [memory](https://docs.dria.co/how-to/workflows#memory-operations).\n\nCreating a Workflow[\u00b6](https://docs.dria.co/how-to/workflows#creating-a-workflow \"Permanent link\")\n--------------------------------------------------------------------------------------------------\n\nWorkflows define the execution flow of tasks involving Large Language Models (LLMs).\n\nKey components of a `Workflow`: - Configuration (config): An object containing settings like maximum steps, time limits, and tools. - Steps: A list of steps defining the individual units of work in the workflow. - Flow: A list specifying the execution order and conditional logic between tasks. - Return Value: A memory key indicating what value to return at the end of the workflow.\n\n* * *\n\n_`dria_workflows` is a Python package that simplifies the creation of workflows for Dria nodes. It's a dependency of the Dria SDK._\n\nYou can install it using pip for experimenting:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-0-1)pipinstalldria-workflows\n```\n\n* * *\n\nIn Dria, you create a `WorkflowBuilder` instance to start building your workflow:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-1-2)builder = WorkflowBuilder()\n```\n\nThe configuration settings control the workflow\u2019s execution parameters. You can set them using methods on the WorkflowBuilder instance.\n\n`max_steps`: The maximum number of steps the workflow can execute.\n\n`max_time`: The maximum time (in seconds) the workflow can run.\n\n`max_tokens`: The maximum number of tokens the LLM can generate.\n\nThese are limitations to prevent infinite loops or excessive resource usage. You can set them as follows:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-1)builder.set_max_steps(5)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-2)builder.set_max_time(100)\n[](https://docs.dria.co/how-to/workflows#__codelineno-2-3)builder.set_max_tokens(750)\n```\n\nDria nodes provides several built-in tools that is included in your workflow by default. Tools include: - Search: Tools for searching and retrieving data. - Scrape: Tools for scraping data from the web. - Stock: Tool for retrieving stock data.\n\n#### Steps[\u00b6](https://docs.dria.co/how-to/workflows#steps \"Permanent link\")\n\nEach step describes a task in the workflow. Here is a simple workflow with a single step:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-1)from dria_workflows import WorkflowBuilder, Operator, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-2)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-3)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-4)    id=\"task_id\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-5)    prompt=\"What is 2+2?\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-6)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-7)    outputs=[Write.new(\"result\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-3-8))\n```\n\nLet's break down the workflow step:\n\n*   Create a step named `task_id`\n*   Use the prompt \"What is 2+2?\" as your instruction\n*   Set the operator to `Operator.GENERATION` for text generation\n*   Define the output to write the result to the memory key `result`\n\n[_Memory_](https://docs.dria.co/how-to/workflows#memory-operations) is a crucial component of workflows. It allows inter-step data transfer.\n\n#### _Step types_[\u00b6](https://docs.dria.co/how-to/workflows#step-types \"Permanent link\")\n\nThere are two types of steps in a workflow:\n\n`generative_step()` -\\> Steps that generate text using an LLM. - operator `Operator` - GENERATION: Generates text using an LLM. - FUNCTION\\_CALLING: Used for calling built-in [functions](https://docs.dria.co/functions/). Will execute the function and return the result. - FUNCTION\\_CALLING\\_RAW: Used for calling built-in or custom functions. Will return a function call without executing it. - prompt `str`: The prompt for the LLM. - path `str`: The path to a markdown file containing the prompt. - id `str`: The unique ID for the step.\n\n`search_step()`: Steps that perform a search operation through the file system. - search\\_query `str`: The query to search for. - id `str`: The unique ID for the step.\n\n> Search is a built-in functionality of Dria nodes. Each node has a file system (vectorDB) that stores data for semantic search. Searchable data is inserted through `Insert` [output](https://docs.dria.co/how-to/workflows#memory-operations) type.\n\nMemory Operations[\u00b6](https://docs.dria.co/how-to/workflows#memory-operations \"Permanent link\")\n----------------------------------------------------------------------------------------------\n\nMemory operations allow tasks to read from and write to different storage mechanisms: cache, stack, and file system. Cache is a _KV cache_. Stack is a _LIFO stack_. File system is a _vectorDB_ for semantic search.\n\n#### Inputs[\u00b6](https://docs.dria.co/how-to/workflows#inputs \"Permanent link\")\n\nBefore interacting with LLM, steps read inputs from memory and replace variables written `{{history}}` in prompts with actual values. It serves as a template engine like [jinja](https://github.com/pallets/jinja).\n\n*   Read: Reads a value from the cache.\n*   Pop: Pops the last value from a stack.\n*   Peek: Peeks at a value (with index) in a stack.\n*   GetAll: Retrieves all values from a stack.\n*   Search: Performs a semantic search in the file system.\n\nCode examples\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-1)from dria_workflows import Read, GetAll, Peek, Pop, Search\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-2)inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-3)    Read.new(key=\"user_input\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-4)    GetAll.new(key=\"history\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-5)    Peek.new(key=\"last_input\", index=0, required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-6)    Pop.new(key=\"last_output\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-7)    Search.new(query=\"search_query\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-4-8)]\n```\n\n`required` field in inputs specifies if the input is mandatory for the task, forcing executor to halt if not found.\n\n#### Outputs[\u00b6](https://docs.dria.co/how-to/workflows#outputs \"Permanent link\")\n\nAfter step is executed, results are written back to memory for future steps to use.\n\n*   Write: Writes a value to the cache.\n*   Push: Pushes a value onto a stack.\n*   Insert: Inserts a value into the file system.\n\nCode Example\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-1)from dria_workflows import Write, Push, Insert\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-2)outputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-3)    Write.new(key=\"processed_input\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-4)    Push.new(key=\"input_history\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-5)    Insert.new(key=\"search_query\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-5-6)]\n```\n\nFlows[\u00b6](https://docs.dria.co/how-to/workflows#flows \"Permanent link\")\n----------------------------------------------------------------------\n\nSteps define the execution flow between tasks, including conditional logic. Use the flow method to set up the steps:\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-1)from dria_workflows import Edge\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-2)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-3)    Edge(source=\"task_a\", target=\"task_b\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-4)    Edge(source=\"task_b\", target=\"_end\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-5)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-6-6)builder.flow(flow)\n```\n\n*   source: The ID of the source task.\n*   target: The ID of the target task.\n*   fallback (optional): The ID of the task to jump to if the condition is not met.\n*   condition (optional): A condition to evaluate before moving to the target task.\n*   \\_end: A special task ID indicating the end of the workflow.\n\n#### Conditions[\u00b6](https://docs.dria.co/how-to/workflows#conditions \"Permanent link\")\n\nYou can add conditions to steps to control the flow based on certain criteria. _Defining a Condition_\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-1)from dria_workflows import ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-2)condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-3)    input=Read.new(key=\"validation_result\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-4)    expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-5)    expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-6)    target_if_not=\"task_a\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-7-7))\n```\n\n*   input: The input to evaluate.\n*   expression: The comparison operator (e.g., Expression.EQUAL).\n*   expected: The expected value to compare against.\n*   target\\_if\\_not: The task to jump to if the condition is not met.\n\nExample with Condition\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-1)from dria_workflows import Edge, ConditionBuilder, Read, Expression\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-2)Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-3)    source=\"validate_data\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-4)    target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-5)    condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-6)        input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-7)        expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-8)        expected=\"True\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-9)        target_if_not=\"data_generation\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-10)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-8-11)),\n```\n\n### Example Workflow[\u00b6](https://docs.dria.co/how-to/workflows#example-workflow \"Permanent link\")\n\nWe will create a workflow that:\n\n```\n1.  Generates random variables based on a simulation description.\n2.  Validates the generated variables.\n3.  If validation fails, it regenerates the variables.\n```\n\n_See the prompts_: [Random Variable Generation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/prompt.md) [Validation](https://github.com/firstbatchxyz/dria-sdk/blob/master/dria/factory/persona/random_variables/validate.md)\n\nStep-by-Step Implementation\n\n1.  Initialize the Workflow Builder\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-1)from dria_workflows import WorkflowBuilder\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-2)simulation_description = \"Describe your simulation here.\"\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-3)builder = WorkflowBuilder(simulation_description=simulation_description)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-4)builder.set_max_time(90)\n[](https://docs.dria.co/how-to/workflows#__codelineno-9-5)builder.set_max_tokens(750)\n```\n\n2\\. Define the First Task: Random Variable Generation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-3)    id=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-4)    path=\"path/to/prompt.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-8)        Read.new(key=\"is_valid\", required=False),\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-10)    outputs=[Write.new(key=\"random_vars\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-10-11))\n```\n\nInputs: - Reads simulation\\_description. - Optionally reads is\\_valid (useful if looping back after a failed validation).\n\nOutputs: - Writes the generated variables to random\\_vars.\n\n1.  Define the Second Task: Validation\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-1)from dria_workflows import Operator, Read, Write\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-2)builder.generative_step(\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-3)    id=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-4)    path=\"path/to/validate.md\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-5)    operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-6)    inputs=[\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-7)        Read.new(key=\"simulation_description\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-8)        Read.new(key=\"random_vars\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-9)    ],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-10)    outputs=[Write.new(key=\"is_valid\")],\n[](https://docs.dria.co/how-to/workflows#__codelineno-11-11))\n```\n\nInputs: - Reads simulation\\_description. - Reads the generated random\\_vars.\n\nOutputs: - Writes the validation result to is\\_valid.\n\n1.  Define the Workflow Steps\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-1)flow = [\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-2)    Edge(source=\"random_var_gen\", target=\"validate_random_vars\"),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-3)    Edge(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-4)        source=\"validate_random_vars\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-5)        target=\"_end\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-6)        condition=ConditionBuilder.build(\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-7)            input=Read.new(key=\"is_valid\", required=True),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-8)            expression=Expression.EQUAL,\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-9)            expected=\"Yes\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-10)            target_if_not=\"random_var_gen\",\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-11)        ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-12)    ),\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-13)]\n[](https://docs.dria.co/how-to/workflows#__codelineno-12-14)builder.flow(flow)\n```\n\nFirst Edge: From random\\_var\\_gen to validate\\_random\\_vars. Second Edge: From validate\\_random\\_vars to \\_end or back to random\\_var\\_gen based on the validation result.\n\n1.  Set the Return Value\n\n```\n[](https://docs.dria.co/how-to/workflows#__codelineno-13-1)builder.set_return_value(\"random_vars\")\n```\n",
    "url": "https://docs.dria.co/how-to/workflows"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Available Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/models\n\nMarkdown Content:\n| `NousTheta` | `finalend/hermes-3-llama-3.1:8b-q8_0` | Nous's Hermes-2-Theta model, q8\\_0 quantized |\n| `Phi3Medium` | `phi3:14b-medium-4k-instruct-q4_1` | Microsoft's Phi3 Medium model, q4\\_1 quantized |\n| `Phi3Medium128k` | `phi3:14b-medium-128k-instruct-q4_1` | Microsoft's Phi3 Medium model, 128k context length, q4\\_1 quantized |\n| `Phi3_5Mini` | `phi3.5:3.8b` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Phi3_5MiniFp16` | `phi3.5:3.8b-mini-instruct-fp16` | Microsoft's Phi3.5 Mini model, 3.8b parameters |\n| `Gemma2_9B` | `gemma2:9b-instruct-q8_0` | Google's Gemma2 model, 9B parameters |\n| `Gemma2_9BFp16` | `gemma2:9b-instruct-fp16` | Google's Gemma2 model, 9B parameters, fp16 |\n| `Llama3_1_8B` | `llama3.1:latest` | Meta's Llama3.1 model, 8B parameters |\n| `Llama3_1_8Bq8` | `llama3.1:8b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_8Bf16` | `llama3.1:8b-instruct-fp16` | Meta's Llama3.1 model fp16 |\n| `Llama3_1_8BTextQ4KM` | `llama3.1:8b-text-q4_K_M` | Meta's Llama3.1 model q4 |\n| `Llama3_1_8BTextQ8` | `llama3.1:8b-text-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70B` | `llama3.1:70b-instruct-q4_0` | Meta's Llama3.1 model, 70B parameters |\n| `Llama3_1_70Bq8` | `llama3.1:70b-instruct-q8_0` | Meta's Llama3.1 model q8 |\n| `Llama3_1_70BTextQ4KM` | `llama3.1:70b-text-q4_0` | Meta's LLama3.1 model fp16 |\n| `Llama3_2_1B` | `llama3.2:1b` | Meta's LLama3.2 Edge models, 1B parameters |\n| `Llama3_2_3B` | `llama3.2:3b` | Meta's LLama3.2 Edge models, 3B parameters |\n| `Llama3_3_70B` | `llama3.3:70b` | Meta's LLama3.3 Edge models, 3B parameters |\n| `Llama3_2_1BTextQ4KM` | `llama3.2:1b-text-q4_K_M` | Meta's LLama3.2 Edge models, 1B parameters, q4 |\n| `Qwen2_5_7B` | `qwen2.5:7b-instruct-q5_0` | Alibaba's Qwen2.5 model, 7B parameters |\n| `Qwen2_5_7Bf16` | `qwen2.5:7b-instruct-fp16` | Alibaba's Qwen2.5 model, 7B parameters, fp16 |\n| `Qwen2_5_32Bf16` | `qwen2.5:32b-instruct-fp16` | Alibaba's Qwen2.5 model, 32B parameters, fp16 |\n| `Qwen2_5Coder1_5B` | `qwen2.5-coder:1.5b` | Alibaba's Qwen2.5 Coder |\n| `Qwen2_5coder7B` | `qwen2.5-coder:7b-instruct` | AliBaba's Qwen2.5 7b |\n| `Qwen2_5oder7Bq8` | `qwen2.5-coder:7b-instruct-q8_0` | AliBaba's Qwen2.5 7b 8bit |\n| `Qwen2_5coder7Bf16` | `qwen2.5-coder:7b-instruct-fp16` | AliBaba's Qwen2.5 7b 16bit |\n| `QwenQwq` | `qwq` | AliBaba's QwenQwq |\n| `DeepSeekCoder6_7B` | `deepseek-coder:6.7b` | DeepSeek Coding models |\n| `Mixtral8_7b` | `mixtral:8x7b` | Mistral's MoE Models |\n| `GPT4Turbo` | `gpt-4-turbo` | OpenAI's GPT-4 Turbo model |\n| `GPT4o` | `gpt-4o` | OpenAI's GPT-4o model |\n| `GPT4oMini` | `gpt-4o-mini` | OpenAI's GPT-4o mini model |\n| `O1Mini` | `o1-mini` | OpenAI's o1 mini model |\n| `O1Preview` | `o1-preview` | OpenAI's o1 preview model |\n| `Gemini15ProExp0827` | `gemini-1.5-pro-exp-0827` | Gemini 1.5 Pro model |\n| `Gemini15Pro` | `gemini-1.5-pro` | Gemini 1.5 Pro model |\n| `Gemini15Flash` | `gemini-1.5-flash` | Gemini 1.5 Flash model |\n| `Gemini10Pro` | `gemini-1.0-pro` | Gemini 1.0 Pro model |\n| `Gemma2_2bIt` | `gemma-2-2b-it` | Gemma 2 2B IT model |\n| `Gemma2_9bIt` | `gemma-2-9b-it` | Gemma 2 9B IT model |\n| `Gemma2_27bIt` | `gemma-2-27b-it` | Gemma 2 27B IT model |\n| `ORLlama3_1_8B` | `meta-llama/llama-3.1-8b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70B` | `meta-llama/llama-3.1-70b-instruct` | OpenRouter Models |\n| `ORLlama3_1_405B` | `meta-llama/llama-3.1-405b-instruct` | OpenRouter Models |\n| `ORLlama3_1_70BFree` | `meta-llama/llama-3.1-70b-instruct:free` | OpenRouter Models |\n| `ORLlama3_3_70B` | `meta-llama/llama-3.3-70b-instruct` | OpenRouter Models |\n| `OR3_5Sonnet` | `anthropic/claude-3.5-sonnet:beta` | OpenRouter Models |\n| `OR3_5Haiku` | `anthropic/claude-3-5-haiku-20241022:beta` | OpenRouter Models |\n| `ORQwen2_5_72B` | `qwen/qwen-2.5-72b-instruct` | OpenRouter Models |\n| `ORQwen2_5_7B` | `qwen/qwen-2.5-7b-instruct` | OpenRouter Models |\n| `ORQwen2_5Coder32B` | `qwen/qwen-2.5-coder-32b-instruct` | OpenRouter Models |\n| `ORQwen2_5Eva32B` | `eva-unit-01/eva-qwen-2.5-32b` | OpenRouter Models |\n| `ORQwenQwq` | `qwen/qwq-32b-preview` | OpenRouter Models |\n| `ORDeepSeek2_5` | `deepseek/deepseek-chat` | OpenRouter Models |\n| `ORNousHermes405B` | `nousresearch/hermes-3-llama-3.1-405b` | OpenRouter Models |\n| `ORNemotron70B` | `nvidia/llama-3.1-nemotron-70b-instruct` | OpenRouter Models |\n",
    "url": "https://docs.dria.co/how-to/models"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Tasks - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/tasks\n\nMarkdown Content:\nTasks are a fundamental concept in the Dria network. They represent units of work that are executed by nodes in the network. Understanding how tasks work is crucial for effectively using the Dria system.\n\n### What is a Task?[\u00b6](https://docs.dria.co/how-to/tasks#what-is-a-task \"Permanent link\")\n\nA task in Dria consists of a [workflow](https://docs.dria.co/workflows/) and a set of [models](https://docs.dria.co/models/).\n\nTasks are executed asynchronously by nodes in the Dria network. When you create a task, you're essentially publishing it to the network for execution.\n\n```\nflowchart LR\n    A[Dria SDK] -- Tasks --> B[Dria Knowledge Network]\n    B -- Results --> A\n```\n\nNodes in the network listens to P2P messages and execute tasks based on their capabilities and availability. We can think each [compute-node](https://github.com/firstbatchxyz/dkn-compute-node) as processor in [LLM OS](https://x.com/karpathy/status/1723140519554105733). They have memory, tools, and a model to execute tasks.\n\n**Key Features of Tasks**\n\n1.  **Model Selection**: You can specify which models you want to assign your task to. This allows for flexibility in choosing the most appropriate model for your specific needs.\n    \n2.  **Asynchronous Execution**: Tasks are published to the network and executed by available nodes. This asynchronous nature allows for efficient distribution of work across the network.\n    \n3.  **Result Retrieval**: After a task is executed, results are published back to the network.\n    \n4.  **Scalability**: There is no limit to the number of tasks you can publish to the network, allowing for highly scalable operations.\n    \n\n### Sending Tasks[\u00b6](https://docs.dria.co/how-to/tasks#sending-tasks \"Permanent link\")\n\nIn this example, we are using `Simple` task, one of the built-in tasks that takes prompt and executes it on a model. See [Singletons](https://docs.dria.co/singletons/) for more details.\n\n```\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-1)import os\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-2)import asyncio\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-3)from dria.factory import Simple\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-4)from dria.client import Dria\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-5)from dria.models import Task, Model\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-6)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-7)dria = Dria(rpc_token=os.environ[\"DRIA_RPC_TOKEN\"])\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-8)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-9)async def evaluate():\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-10)    simple = Simple()\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-11)    res = await dria.execute(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-12)        Task(\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-13)            workflow=simple.workflow(prompt=\"Hey there!\"),\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-14)            models=[Model.GPT4O],\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-15)        )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-16)    )\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-17)    return simple.parse_result(res)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-18)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-19)\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/tasks#__codelineno-0-21)    asyncio.run(evaluate())\n```\n\n### Lifecycle of a Task[\u00b6](https://docs.dria.co/how-to/tasks#lifecycle-of-a-task \"Permanent link\")\n\n*   Task Creation: You create a task by specifying a workflow and models.\n*   Task Publication: The task is published to the network for execution.\n*   Task Execution: Nodes that run one of the selected models execute the task asynchronously.\n*   Result Retrieval: After execution, the result is published back to the network.\n*   Result Polling: SDK polls the network to retrieve the result.\n*   Task Completion: The task is marked as completed once the result is retrieved.\n",
    "url": "https://docs.dria.co/how-to/tasks"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Exports - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets_exports\n\nMarkdown Content:\nExporting Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#exporting-data \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\nData within DriaDataset can export to different formats:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-1)# Export to pandas DataFrame\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-2)df = dataset.to_pandas()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-3)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-4)# Export to JSONL\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-5)dataset.to_jsonl()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-7)# Export to JSON\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-8)dataset.to_json()\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-9)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-10)# Export to custom path\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-0-11)dataset.to_json(\"export.jsonl\")\n```\n\n### Format for Training[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-for-training \"Permanent link\")\n\nDriaDataset enables [TRL](https://huggingface.co/docs/trl/index) ready data exports for multiple training setups.\n\nThe `Formatter` class is used to convert a dataset into a format that can be used by a specific trainer. Data generated by Dria Network can be transformed into training-ready data using `Formatter`\n\n#### Format Types[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#format-types \"Permanent link\")\n\nThe `Formatter` class supports the following format types:\n\n*   Standard\n*   Conversational\n\nand following subtypes for each format type:\n\n1.  LANGUAGE\\_MODELING\n2.  PROMPT\\_ONLY\n3.  PROMPT\\_COMPLETION\n4.  PREFERENCE\n5.  UNPAIRED\\_PREFERENCE\n\n#### HuggingFace TRL Expected Dataset Formats[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#huggingface-trl-expected-dataset-formats \"Permanent link\")\n\nHuggingFace's TRL is a framework to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step.\n\nDria allows you to convert the generated data into the expected dataset [format](https://huggingface.co/docs/trl/dataset_formats) for each trainer in the TRL framework. Enabling seamless plug-n-play with HuggingFace's TRL.\n\nHere is an example exporting MagPie data in `CONVERSATIONAL_PROMPT_COMPLETION` format. First create dataset and generate data.\n\n#### Generate Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#generate-data \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-2)from dria.factory import MagPie\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-3)import asyncio\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-4)from dria.utils import ConversationMapping, FieldMapping, FormatType\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-6)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-7)instructions = [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-8)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-9)        \"instructor_persona\": \"A math student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-10)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-11)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-12)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-13)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-14)        \"instructor_persona\": \"A chemistry student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-15)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-16)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-17)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-18)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-19)        \"instructor_persona\": \"A physics student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-20)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-21)        \"num_turns\": 3,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-22)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-23)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-24)        \"instructor_persona\": \"A music student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-25)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-26)        \"num_turns\": 5,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-27)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-28)    {\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-29)        \"instructor_persona\": \"A visual arts student\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-30)        \"responding_persona\": \"An AI teaching assistant.\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-31)        \"num_turns\": 2,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-32)    },\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-33)]\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-34)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-35)my_dataset = DriaDataset(\"magpie_test\", \"a test dataset\", MagPie.OutputSchema)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-36)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-37)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-38)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-39)asyncio.run(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-40)    generator.generate(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-41)        instructions,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-42)        MagPie,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-43)        [\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-44)            Model.ANTHROPIC_HAIKU_3_5_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-45)            Model.QWEN2_5_72B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-46)            Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-47)            Model.LLAMA3_1_8B_FP16,\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-48)        ],\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-49)    )\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-1-50))\n```\n\n#### Export Data[\u00b6](https://docs.dria.co/how-to/dria_datasets_exports#export-data \"Permanent link\")\n\nYou can export data by creating a ConversationMapping for CONVERSATIONAL\\_PROMPT\\_COMPLETION. MagPie outputs:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-1)class DialogueTurn(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-2)    instructor: str = Field(..., description=\"Instructor's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-3)    responder: str = Field(..., description=\"Responder's message\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-4)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-5)\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-6)class DialogueOutput(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-7)    dialogue: List[DialogueTurn] = Field(..., description=\"List of dialogue turns\")\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-2-8)    model: str = Field(..., description=\"Model used for generation\")\n```\n\nSo DriaDataset will read the `dialogue` field and map `instructor` to `user_message` and `responder` to the `assistant_message`. DriaDataset will export a jsonl file in suitable format.\n\n```\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-1)cmap = ConversationMapping(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-2)    conversation=FieldMapping(user_message=\"instructor\", assistant_message=\"responder\"),\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-3)    field=\"dialogue\",\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-4))\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-5)my_dataset.format_for_training(\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-6)    FormatType.CONVERSATIONAL_PROMPT_COMPLETION, cmap, output_format=\"jsonl\"\n[](https://docs.dria.co/how-to/dria_datasets_exports#__codelineno-3-7))\n```\n\nHere are the full list of TRL formats mapped to Dria formats.\n\n* * *\n\n| Trainer | Expected Dataset Type |\n| --- | --- |\n| **BCOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **CPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **DPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **GKDTrainer** | `FormatType.STANDARD_PROMPT_COMPLETION` |\n| **IterativeSFTTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` |\n| **KTOTrainer** | `FormatType.STANDARD_UNPAIRED_PREFERENCE` or `FormatType.STANDARD_PREFERENCE` |\n| **NashMDTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **OnlineDPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n| **ORPOTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **PPOTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **RewardTrainer** | `FormatType.STANDARD_PREFERENCE` |\n| **SFTTrainer** | `FormatType.STANDARD_LANGUAGE_MODELING` |\n| **XPOTrainer** | `FormatType.STANDARD_PROMPT_ONLY` |\n\n* * *\n",
    "url": "https://docs.dria.co/how-to/dria_datasets_exports"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Selecting Models - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/selecting_models\n\nMarkdown Content:\nDria Network is a network of LLMs. When a task is published to the network, you can specify which models you want to assign your task to.\n\n> See [models](https://docs.dria.co/models/)\n\n`Model` enum provides a list of models that you can use in your tasks.\n\n`DatasetGenerator.generate()` has `models`param to assign models to your task.\n\nFollowing task will be executed by `LLAMA3_1_8B_FP16` model. If the model is not available within network, SDK will poll the network until it finds an available `LLAMA3_1_8B_FP16` model.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-1)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-2)    instructions=instructions, singletons=prompter, models=Model.LLAMA3_1_8B_FP16\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-1-3))\n```\n\n**Model Availability?**\n\nDria Network consists of multiple nodes, each running one or more available models. When a task is published, nodes with the selected model execute the task asynchronously.\n\nFor example, if the network has 100 `Llama3.2-3B` models, publishing a task with the `Llama3.2-3B` model will be handled by one of those models. Publishing 100 tasks will distribute each to one of the 100 available models. However, if you publish a 101st task, task will wait in queue until a `Llama3.2-3B` model becomes available.\n\n**Singe Task, Multiple Models**\n\nDria SDK enables you to publish a single task to multiple models. This is useful when you want to compare the results of different models on the same task. Following example uses same instruction with different available open-source LLM and returns the results.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-1)instructions = [{\"topic\": \"Decentralized synthetic data\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-2)\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-3)DatasetGenerator(dataset=dataset).generate(\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-4)    instructions=instructions, singletons=prompter, models=[Model.LLAMA3_1_8B_FP16, Model.LLAMA_3_1_70B_OR]\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-2-5))\n```\n\nYou can also select providers as your models.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-1)# Providers\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-2)OLLAMA = \"ollama\"  # Open source models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-3)OPENAI = \"openai\"  # OpenAI models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-4)GEMINI = \"gemini\"  # Gemini models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-5)OPENROUTER = \"openrouter\"  # OpenRouter models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-3-6)CODER = \"coder\"  # Coder models\n```\n\nAlso models can selected by their sizes.\n\n```\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-1)# By sizes\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-2)SMALL = \"small\"  # Small-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-3)MID = \"mid\"  # Mid-size models\n[](https://docs.dria.co/how-to/selecting_models#__codelineno-4-4)LARGE = \"large\"  # Large-size models\n```\n",
    "url": "https://docs.dria.co/how-to/selecting_models"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Generator - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_generators\n\nMarkdown Content:\nDataset Generator[\u00b6](https://docs.dria.co/how-to/data_generators#dataset-generator \"Permanent link\")\n----------------------------------------------------------------------------------------------------\n\n`DatasetGenerator` is a powerful tool for generating and transforming datasets using Dria, supporting both prompt-based and singleton-based data generation workflows.\n\nCore Features[\u00b6](https://docs.dria.co/how-to/data_generators#core-features \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\n*   Parallel execution capabilities\n*   Automatic schema validation\n*   Multiple model support\n*   Search capabilities\n*   Sequential workflow processing\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/data_generators#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nDatasetGenerator requires a DriaDataset to operate.\n\n### Using Prompts[\u00b6](https://docs.dria.co/how-to/data_generators#using-prompts \"Permanent link\")\n\nPrompt-based generation is a simple way to generate data using a single prompt. Dria will apply the prompt to each instruction. Prompts are defined using the `Prompt` class.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-1)import asyncio\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-4)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-6)# Define output schema\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-7)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-8)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-9)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-10)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-12)# Create dataset\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-13)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-14)    name=\"tweet_test\", description=\"A dataset of tweets!\", schema=Tweet\n[](https://docs.dria.co/how-to/data_generators#__codelineno-0-15))\n```\n\nAfter dataset is created, you can define instructions and prompts to apply to the instructions. Prompts accept variables with double curly braces `{{variable}}`.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-1)instructions = [{\"topic\": \"BadBadNotGood\"}, {\"topic\": \"Decentralized synthetic data\"}]\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-2)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-3)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-4)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-5)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-6)asyncio.run(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-7)    generator.generate(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-8)        instructions=instructions, singletons=prompter, models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-9)    )\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-10))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-11)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-1-12)print(dataset.to_pandas())\n```\n\n### Using Singletons[\u00b6](https://docs.dria.co/how-to/data_generators#using-singletons \"Permanent link\")\n\nDria provides a factory for [pre-built](https://docs.dria.co/factory/simple/) singletons. Singletons are custom classes that define a specific workflow for generating data.\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-1)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-2)from dria.factory import GenerateSubtopics\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-3)\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-4)my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-5)    name=\"subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-6)    description=\"A dataset for subtopics\",\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-7)    schema=GenerateSubtopics.OutputSchema,\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-8))\n[](https://docs.dria.co/how-to/data_generators#__codelineno-2-9)generator = DatasetGenerator(dataset=my_dataset)\n```\n\nModel Configuration[\u00b6](https://docs.dria.co/how-to/data_generators#model-configuration \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n### Single Model[\u00b6](https://docs.dria.co/how-to/data_generators#single-model \"Permanent link\")\n\n### Multiple Models[\u00b6](https://docs.dria.co/how-to/data_generators#multiple-models \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-4-1)models = [Model.GPT4O, Model.GEMINI_15_FLASH]\n```\n\n### Model Pipeline[\u00b6](https://docs.dria.co/how-to/data_generators#model-pipeline \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-1)models = [\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-2)    [Model.GPT4O],           # For first singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-3)    [Model.GEMINI_15_FLASH], # For second singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-4)    [Model.LLAMA3_1_8B_FP16] # For third singleton\n[](https://docs.dria.co/how-to/data_generators#__codelineno-5-5)]\n```\n",
    "url": "https://docs.dria.co/how-to/data_generators"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Create - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/dria_datasets\n\nMarkdown Content:\nDria Dataset[\u00b6](https://docs.dria.co/how-to/dria_datasets#dria-dataset \"Permanent link\")\n----------------------------------------------------------------------------------------\n\nThe `DriaDataset` class serves as the foundation of Dria's data generation framework. It provides a structured way to create, manage, and persist data throughout the generation process.\n\n### Data Persistence[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-persistence \"Permanent link\")\n\n*   All generated data is automatically saved to the dataset\n*   Intermediate steps in multi-stage generation processes are preserved\n*   Failed generation attempts are tracked and stored\n\n### Flexible Initialization[\u00b6](https://docs.dria.co/how-to/dria_datasets#flexible-initialization \"Permanent link\")\n\n*   Start with an empty dataset\n*   Initialize with existing data (e.g., from Hugging Face datasets)\n*   Augment existing data or use existing data as instructions\n\n### Data Management[\u00b6](https://docs.dria.co/how-to/dria_datasets#data-management \"Permanent link\")\n\n*   Schema validation ensures data consistency\n*   Multiple import/export options for compatibility\n*   Structured handling of complex datasets\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/dria_datasets#basic-usage \"Permanent link\")\n--------------------------------------------------------------------------------------\n\nDria SDK operates through `DriaDataset`.\n\nImport packages\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-1)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-0-2)from dria import DriaDataset\n```\n\nDefine a pydantic schema\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-1)# Define your schema\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-2)class MySchema(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-3)    text: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-1-4)    label: int\n```\n\nCreate a `DriaDataset`\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-1)# Create dataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-2)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-3)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-4)    description=\"Example dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-5)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-2-6))\n```\n\nCreate From Existing[\u00b6](https://docs.dria.co/how-to/dria_datasets#create-from-existing \"Permanent link\")\n--------------------------------------------------------------------------------------------------------\n\n`DriaDataset` can be initialized with existing data.\n\n### From HuggingFace[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-huggingface \"Permanent link\")\n\nCreate dataset by:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-1)from dria import DriaDataset\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-2)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-3)from typing import List\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-5)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-6)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-7)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-8)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-9)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-10)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-11)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-3-12)my_dataset = DriaDataset.from_huggingface(name=\"subquery_data\", description=\"A list of query and subqueries\", dataset_id=\"andthattoo/subqueries\", schema=ConversationData)\n```\n\nReload data by using the same name and schema :\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-1)class ConversationItem(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-2)    from_: str = Field(..., alias=\"from\")\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-3)    value: str\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-4)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-5)class ConversationData(BaseModel):\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-6)    conversations: List[ConversationItem]\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-7)\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-4-8)my_dataset = DriaDataset(name=\"subquery_data\", description=\"A list of query and subqueries\", schema=ConversationData)\n```\n\n### From JSON & CSV[\u00b6](https://docs.dria.co/how-to/dria_datasets#from-json-csv \"Permanent link\")\n\nSame method applies for JSON and CSV files.\n\nFor JSON:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-1)dataset = DriaDataset.from_json(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-2)    name=\"json_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-3)    description=\"Dataset from JSON\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-5)    json_path=\"data.json\"\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-5-6))\n```\n\nFor CSV files:\n\n```\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-1)dataset = DriaDataset.from_csv(\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-2)    name=\"csv_dataset\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-3)    description=\"Dataset from CSV\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-4)    schema=MySchema,\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-5)    csv_path=\"data.csv\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-6)    delimiter=\",\",\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-7)    has_header=True\n[](https://docs.dria.co/how-to/dria_datasets#__codelineno-6-8))\n```\n",
    "url": "https://docs.dria.co/how-to/dria_datasets"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Data Enrichment - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/data_enrichment\n\nMarkdown Content:\n`enrich` provides powerful data enrichment capabilities that allow you to enrich your existing datasets by generating new fields through Dria. This helps you build richer data representations for analytics, machine learning models, or other downstream tasks.\n\nUsage[\u00b6](https://docs.dria.co/how-to/data_enrichment#usage \"Permanent link\")\n----------------------------------------------------------------------------\n\n1.  **Define a Schema:** Create a Pydantic model to describe the output fields you want to generate.\n    \n2.  **Create a Prompt:** Write a descriptive prompt with placeholders matching your schema fields. The prompt guides the model on how to transform or analyze the data.\n    \n3.  **Run Enrichment:** Use Dria's `enrich` method to process your dataset.\n    \n\nBasic Example: Text Summarizing[\u00b6](https://docs.dria.co/how-to/data_enrichment#basic-example-text-summarizing \"Permanent link\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nHere's a complete example showing how to analyze the extract summary of a text using Dria:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-1)# Define the schema for summarized content\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-2)class SummarizedContent(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-3)    summary: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-4)    text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-6)# Create a prompt with the summary instruction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-7)prompter = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-8)   \"Summarize the following text in a single concise paragraph:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-9)   schema=SummarizedContent\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-10))\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-11)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-12)await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-13)    prompter,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-14)    models=Model.GPT4O\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-0-15))\n```\n\nBefore the enrichment, dataset is look like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-1-7)]\n```\n\nAfter the adding summary field to our dataset, it looks like;\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-3)\"prompt\":\"Write a short, customer review of an open-source AI toolkit, highlighting its usability, key features, and community support.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-4)\"generation\":\"**5/5 stars**\\n\\nI've been using the OpenSpark AI toolkit for the past month, and I must say it's been a game-changer for me. As a data scientist working on a tight deadline, I need tools that are not only powerful but also easily accessible and well-documented. OpenSpark has exceeded my expectations in every aspect.\\n\\n**Easy to Use**: The intuitive API and drag-and-drop interface make it simple to build, train, and deploy machine learning models. I was able to get started with the toolkit in just a few hours, thanks to the comprehensive tutorials and examples provided.\\n\\n**Key Features**: Some of the standout features that have impressed me include:\\n\\n* **Multi-Model Support**: OpenSpark allows me to train and deploy multiple models simultaneously, streamlining my workflow and saving me precious time.\\n* **AutoML**: The toolkit's AutoML feature has helped me optimize model performance and improve model interpretability.\\n* **Real-time Integration**: I can seamlessly integrate OpenSpark with popular data storage solutions (e.g., Spark, Cassandra, Hadoop) and visualization tools like Jupyter or Tableau.\\n\\n**Community Support**: The OpenSpark community has been incredibly supportive and engaged. The team actively participate in issues and discussion forums, ensuring that bug reports are addressed promptly, and feature requests are prioritized thoughtfully.\\n\\nWhat I love most about OpenSpark is its commitment to open-source development. As an open-source project, it fosters a collaborative community where everyone can contribute, learn, and grow together.\\n\\n**Recommendation**: If you're looking for a reliable, user-friendly, and feature-rich AI toolkit that won't break the bank, look no further than OpenSpark. Its exceptional usability, rich feature set, and robust community support make it an excellent choice for both beginners and seasoned practitioners alike.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-5)\"model\":\"meta-llama/llama-3.1-8b-instruct\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-6)\"summary\":\"The OpenSpark AI toolkit is a transformative asset for data scientists working under pressure, thanks to its user-friendly interface and comprehensive documentation. It facilitates the efficient building, training, and deployment of machine learning models through an intuitive API and drag-and-drop function and is enriched by standout features like multi-model support, AutoML for optimization, and seamless real-time integration with popular data and visualization tools. The toolkit's strong open-source community actively engages in discussions and supports continuous development, making OpenSpark a cost-effective and versatile choice for AI practitioners of all skill levels, supported by its commitment to open-source innovation and collaborative growth.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-7)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-2-8)]\n```\n\nHow It Works[\u00b6](https://docs.dria.co/how-to/data_enrichment#how-it-works \"Permanent link\")\n------------------------------------------------------------------------------------------\n\n1.  **Schema Definition**: We use Pydantic's `BaseModel` to define the structure of our enriched data. The `SummarizedContent` class specifies that we want to keep both the original text and its summary.\n    \n2.  **Prompt Creation**: The `Prompt` class is initialized with:\n    \n    *   An input parameter `{{text}}` for given field which should already in as a field in your dataset.\n    *   The `SummarizedContent` schema that defines the expected additional field your dataset.\n3.  **Enrichment Process**: The `enrich` method:\n    \n    *   Takes each record from your dataset\n    *   Applies the given prompt\n    *   Updates the dataset with the enriched information\n\nFull-code example: Multi-Field Data Enrichment using Dria[\u00b6](https://docs.dria.co/how-to/data_enrichment#full-code-example-multi-field-data-enrichment-using-dria \"Permanent link\")\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis example demonstrates a production-level workflow using Dria's capabilities to generate and enrich a dataset of customer reviews. The process involves:\n\n1.  Generating initial dataset entries (customer reviews) using a model.\n2.  Transforming and updating the dataset by extracting key insights such as sentiment, keywords.\n\n* * *\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-1)import asyncio\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-2)import logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-3)from pydantic import BaseModel\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-4)from dria import DriaDataset, DatasetGenerator, Prompt, Model\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-5)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-6)# Configure logging\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-7)logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-8)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-9)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-10)async def enrich_reviews():\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-11)\"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-12)   Generates and enriches a dataset of customer reviews about an AI toolkit.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-13)   Each review is analyzed for sentiment and keywords.\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-14)   \"\"\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-15)   try:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-16)      # Define the schema for reviews\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-17)      class Review(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-18)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-19)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-20)      # Initialize the dataset\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-21)      dataset_name = \"customer_reviews_test\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-22)      my_dataset = DriaDataset(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-23)         name=dataset_name,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-24)         description=\"Optimized dataset of customer reviews\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-25)         schema=Review,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-26)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-27)      logging.info(f\"Initialized dataset '{dataset_name}'.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-28)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-29)      # Set up the dataset generator\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-30)      generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-31)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-32)      # Define instructions for the initial dataset generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-33)      instructions = [\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-34)         {\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-35)            \"topic\": \"customer review of an open-source AI toolkit, \"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-36)                     \"highlighting its usability, key features, and community support.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-37)         }\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-38)      ]\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-39)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-40)      # Create the prompt for initial generation\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-41)      initial_prompt = Prompt(\"Write a short review about {{topic}}\", schema=Review)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-42)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-43)      # Generate the initial dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-44)      logging.info(\"Generating initial dataset entries...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-45)      await generator.generate(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-46)         instructions=instructions,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-47)         singletons=initial_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-48)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-49)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-50)      logging.info(\"Initial dataset generation completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-51)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-52)      # Define the schema for enrichment (analysis)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-53)      class AnalyzedText(BaseModel):\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-54)         sentiment: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-55)         keywords: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-56)         text: str\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-57)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-58)      # Create the prompt for text analysis\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-59)      enrichment_prompt = Prompt(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-60)         \"Identify the sentiment (positive, negative, or neutral) of the following text and extract keywords:\\n\\n{{text}}\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-61)         schema=AnalyzedText,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-62)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-63)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-64)      # Enrich the dataset with sentiment analysis and keyword extraction\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-65)      logging.info(\"Enriching dataset entries with analysis...\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-66)      await generator.enrich(\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-67)         enrichment_prompt,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-68)         models=Model.GPT4O,\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-69)      )\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-70)      logging.info(\"Dataset enrichment completed.\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-71)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-72)      # Retrieve and log enriched dataset entries\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-73)      enriched_entries = my_dataset.get_entries(data_only=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-74)      logging.info(f\"Enriched dataset entries: {enriched_entries}\")\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-75)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-76)   except Exception as e:\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-77)      logging.error(f\"An error occurred: {e}\", exc_info=True)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-78)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-79)\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-80)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-81)   # Execute the enrichment process\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-3-82)   asyncio.run(enrich_reviews())\n```\n\nBefore the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-3)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-4)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-4-5)]\n```\n\nAfter the enrichment, the dataset looks like this:\n\n```\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-1)[\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-2){\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-3)\"sentiment\":\"positive\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-4)\"keywords\":\"OpenAI Kit, open-source platform, usability, key features, community support, installation, intuitive user interface, diverse model support, seamless integration, tutorials, customization, community board, innovation.\",\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-5)\"text\":\"The review of the OpenAI Kit is overwhelmingly positive, highlighting its usability, diverse model support, seamless integration, and strong community support. The toolkit is praised for its straightforward installation process, intuitive interface, and accessibility for both beginners and seasoned developers. Additionally, the committed community and abundance of resources further bolster its appeal, making it highly recommended for AI enthusiasts.\"\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-6)}\n[](https://docs.dria.co/how-to/data_enrichment#__codelineno-5-7)]\n```\n\nUse Cases[\u00b6](https://docs.dria.co/how-to/data_enrichment#use-cases \"Permanent link\")\n------------------------------------------------------------------------------------\n\n*   Enrich customer feedback or support tickets with actionable insights (sentiment, key topics, entities).\n*   Enhance large text corpora with metadata for improved search, filtering, and analytics.\n*   Gain a more holistic understanding of textual data by combining multiple analytical layers into a single enriched result.\n*   More rapidly process and categorize large volumes of unstructured textual information, making it easier to identify trends, common issues, or frequently mentioned concepts.\n*   Enhance upstream and downstream workflows: for instance, use the enriched fields to quickly filter content by sentiment, run targeted analyses on certain entities, or cluster documents by their main themes.\n",
    "url": "https://docs.dria.co/how-to/data_enrichment"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Functions - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/functions\n\nMarkdown Content:\nDria Nodes provides several built-in tools that are included in your workflow by default. Selecting `Operator.FUNCTION_CALLING` will pick a tool from the list of built-in tools and execute it based on the instruction provided.\n\nExample Step:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-0-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-0-2)    id=\"task_id\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-3)    prompt=\"What are the current prices of $AAPL and $GOOGL?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-0-4)    operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-0-5)    outputs=[Write.new(\"result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-0-6))\n```\n\nStep above will select the `Stock` tool and execute it based on the instruction provided.\n\nSee [workflows](https://docs.dria.co/workflows/) for available built-in tools.\n\nCustom Functions[\u00b6](https://docs.dria.co/how-to/functions#custom-functions \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nDria enables you to create custom functions (tools) that can be used in your workflows. These functions can be used to perform custom operations that are not natively supported by Dria.\n\nDria supports two types of custom functions:\n\n*   `CustomTool`: A pydantic model that can be used in your workflows.\n\n`CustomTool` will not be executed by Dria. Instead, it will be returned as a function call in the workflow output.\n\n*   `HttpRequestTool`: An HTTP request tool that can be used to make HTTP requests in your workflows.\n\n`HttpRequestTool` will be executed by Dria and the result will be returned in the workflow output.\n\n#### CustomTool[\u00b6](https://docs.dria.co/how-to/functions#customtool \"Permanent link\")\n\nTo create a custom function, you need to create a class that inherits from `CustomTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-1-1)from dria_workflows import CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-1-2)from pydantic import Field\n[](https://docs.dria.co/how-to/functions#__codelineno-1-3)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-4)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-5)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-6)    description: str = \"A tool sums integers\"\n[](https://docs.dria.co/how-to/functions#__codelineno-1-7)    lhs: int = Field(0, description=\"Left hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-8)    rhs: int = Field(0, description=\"Right hand side of sum\")\n[](https://docs.dria.co/how-to/functions#__codelineno-1-9)\n[](https://docs.dria.co/how-to/functions#__codelineno-1-10)    def execute(self, **kwargs):\n[](https://docs.dria.co/how-to/functions#__codelineno-1-11)        return self.lhs + self.rhs\n```\n\n`name` and `description` are required fields that describe the custom function. For the rest of your custom function, you can define any number of fields that you need. If field has a default value, it means it's a required field.\n\nTo incorporate the custom function into your workflow, simple call `add_custom_tool` method on the `WorkflowBuilder` instance.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-2-1)builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-2-2)builder.add_custom_tool(SumTool())\n```\n\nThis would add the custom function to the list of available functions in your workflow.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-3-1)builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-3-2)    id=\"sum\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-3)    prompt=f\"What is {lhs} + {rhs}?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-3-4)    operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-3-5)    outputs=[Write.new(\"call\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-3-6))\n```\n\nSteps that incorporate custom functions should use `Operator.FUNCTION_CALLING_RAW` as the operator. This would force Dria Nodes to return the function call without executing it.\n\nBelow is a full example of a workflow that sums two numbers using a custom function:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-4-1)import asyncio\n[](https://docs.dria.co/how-to/functions#__codelineno-4-2)from typing import List\n[](https://docs.dria.co/how-to/functions#__codelineno-4-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/functions#__codelineno-4-4)from dria_workflows import Workflow, WorkflowBuilder, Operator, Edge, Write, CustomTool\n[](https://docs.dria.co/how-to/functions#__codelineno-4-5)from dria.factory.workflows.template import SingletonTemplate\n[](https://docs.dria.co/how-to/functions#__codelineno-4-6)from dria.models import TaskResult\n[](https://docs.dria.co/how-to/functions#__codelineno-4-7)from dria import DriaDataset, DatasetGenerator, Model\n[](https://docs.dria.co/how-to/functions#__codelineno-4-8)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-9)class SumTool(CustomTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-10)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-11)    A custom tool to perform summation of two integers.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-13)    name: str = \"calculator\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-14)    description: str = \"A tool that sums two integers.\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-15)    lhs: int = Field(0, description=\"Left-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-16)    rhs: int = Field(0, description=\"Right-hand operand for summation\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-17)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-18)    def execute(self, **kwargs) -> int:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-19)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-20)        Execute the summation operation.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-21)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-22)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-23)            int: The sum of lhs and rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-24)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-25)        return self.lhs + self.rhs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-26)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-27)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-28)class SummationOutput(BaseModel):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-29)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-30)    Schema for the output of the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-31)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-32)    query: str = Field(..., description=\"The function calling query.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-33)    result: int = Field(..., description=\"The result of the summation.\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-34)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-35)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-36)class Summation(SingletonTemplate):\n[](https://docs.dria.co/how-to/functions#__codelineno-4-37)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-38)    Workflow for executing a summation operation and handling function calls.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-39)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-40)    # Input fields\n[](https://docs.dria.co/how-to/functions#__codelineno-4-41)    prompt: str = Field(..., description=\"Input prompt for the workflow\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-42)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-43)    # Output schema\n[](https://docs.dria.co/how-to/functions#__codelineno-4-44)    OutputSchema = SummationOutput\n[](https://docs.dria.co/how-to/functions#__codelineno-4-45)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-46)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-47)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-48)        Creates the summation workflow.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-49)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-50)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-51)            Workflow: A constructed workflow for summation\n[](https://docs.dria.co/how-to/functions#__codelineno-4-52)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-53)        # Set default values for the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-54)        max_tokens = getattr(self.params, \"max_tokens\", 1000)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-55)        builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-56)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-57)        # Add custom summation tool to the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-58)        builder.add_custom_tool(SumTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-4-59)        builder.set_max_tokens(max_tokens)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-60)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-61)        # Define the generative step for function calling\n[](https://docs.dria.co/how-to/functions#__codelineno-4-62)        builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-63)            prompt=self.prompt,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-64)            operator=Operator.FUNCTION_CALLING_RAW,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-65)            outputs=[Write.new(\"calculation_result\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-66)        )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-67)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-68)        # Define the workflow flow structure\n[](https://docs.dria.co/how-to/functions#__codelineno-4-69)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-70)        builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-71)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-72)        # Set the final return value of the workflow\n[](https://docs.dria.co/how-to/functions#__codelineno-4-73)        builder.set_return_value(\"calculation_result\")\n[](https://docs.dria.co/how-to/functions#__codelineno-4-74)        return builder.build()\n[](https://docs.dria.co/how-to/functions#__codelineno-4-75)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-76)    def callback(self, result: List[TaskResult]) -> List[SummationOutput]:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-77)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-78)        Parses the workflow results into validated output objects.\n[](https://docs.dria.co/how-to/functions#__codelineno-4-79)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-80)        Args:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-81)            result: List of TaskResult objects\n[](https://docs.dria.co/how-to/functions#__codelineno-4-82)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-83)        Returns:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-84)            List[SummationOutput]: List of validated summation outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-85)        \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-86)        outputs = []\n[](https://docs.dria.co/how-to/functions#__codelineno-4-87)        for task_result in result:\n[](https://docs.dria.co/how-to/functions#__codelineno-4-88)            for calculation in task_result.parse():\n[](https://docs.dria.co/how-to/functions#__codelineno-4-89)                outputs.append(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-90)                    SummationOutput(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-91)                        query=task_result.result,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-92)                        result=calculation.execute([SumTool])\n[](https://docs.dria.co/how-to/functions#__codelineno-4-93)                    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-94)                )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-95)        return outputs\n[](https://docs.dria.co/how-to/functions#__codelineno-4-96)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-97)instructions = [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-98)    {\n[](https://docs.dria.co/how-to/functions#__codelineno-4-99)        \"prompt\": \"What is 10212 + 12677?\"\n[](https://docs.dria.co/how-to/functions#__codelineno-4-100)    }\n[](https://docs.dria.co/how-to/functions#__codelineno-4-101)]\n[](https://docs.dria.co/how-to/functions#__codelineno-4-102)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-103)my_dataset = DriaDataset(\"summation_test\", \"a test dataset\", Summation.OutputSchema)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-104)generator = DatasetGenerator(dataset=my_dataset)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-105)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-106)asyncio.run(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-107)    generator.generate(\n[](https://docs.dria.co/how-to/functions#__codelineno-4-108)        instructions,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-109)        Summation,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-110)        [\n[](https://docs.dria.co/how-to/functions#__codelineno-4-111)            Model.GPT4O,\n[](https://docs.dria.co/how-to/functions#__codelineno-4-112)        ],\n[](https://docs.dria.co/how-to/functions#__codelineno-4-113)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-4-114))\n[](https://docs.dria.co/how-to/functions#__codelineno-4-115)\n[](https://docs.dria.co/how-to/functions#__codelineno-4-116)print(my_dataset.get_entries())\n```\n\n#### HttpRequestTool[\u00b6](https://docs.dria.co/how-to/functions#httprequesttool \"Permanent link\")\n\n`HttpRequestTool` is a tool that can be used to make HTTP requests in your workflows. Unlike `CustomTool`, `HttpRequestTool` will be executed by Dria Nodes and the result will be returned in the workflow output.\n\nTo create an `HttpRequestTool`, you need to create a class that inherits from `HttpRequestTool` and implement the `execute` method.\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-5-1)from dria_workflows import HttpRequestTool, HttpMethod\n[](https://docs.dria.co/how-to/functions#__codelineno-5-2)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-5-3)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-4)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-5)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-5-6)    method: HttpMethod = HttpMethod.GET\n```\n\nAn `HttpRequestTool` requires the following fields:\n\n*   `name`: The name of the tool.\n*   `description`: A description of the tool.\n*   `url`: The URL to make the HTTP request to.\n*   `method`: The HTTP method to use for the request.\n*   `headers`: Optional headers to include in the request.\n*   `body`: Optional body to include in the request.\n\nA `HttpRequestTool` can be added to the workflow in the same way as a `CustomTool`. Here is an example of a workflow that fetches cryptocurrency prices using an `HttpRequestTool`:\n\n```\n[](https://docs.dria.co/how-to/functions#__codelineno-6-1)class PriceFeedTool(HttpRequestTool):\n[](https://docs.dria.co/how-to/functions#__codelineno-6-2)    name: str = \"PriceFeedRequest\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-3)    description: str = \"Fetches price feed from Gemini API\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-4)    url: str = \"https://api.gemini.com/v1/pricefeed\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-5)    method: HttpMethod = HttpMethod.GET\n[](https://docs.dria.co/how-to/functions#__codelineno-6-6)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-7)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-8)def workflow():\n[](https://docs.dria.co/how-to/functions#__codelineno-6-9)\"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-10)    Create a workflow to get cryptocurrency prices\n[](https://docs.dria.co/how-to/functions#__codelineno-6-11)    :return:\n[](https://docs.dria.co/how-to/functions#__codelineno-6-12)    \"\"\"\n[](https://docs.dria.co/how-to/functions#__codelineno-6-13)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-14)    builder = WorkflowBuilder()\n[](https://docs.dria.co/how-to/functions#__codelineno-6-15)    builder.add_custom_tool(PriceFeedTool())\n[](https://docs.dria.co/how-to/functions#__codelineno-6-16)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-17)    builder.generative_step(\n[](https://docs.dria.co/how-to/functions#__codelineno-6-18)        id=\"get_prices\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-19)        prompt=f\"What is the BTC/USDT parity?\",\n[](https://docs.dria.co/how-to/functions#__codelineno-6-20)        operator=Operator.FUNCTION_CALLING,\n[](https://docs.dria.co/how-to/functions#__codelineno-6-21)        outputs=[Write.new(\"prices\")]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-22)    )\n[](https://docs.dria.co/how-to/functions#__codelineno-6-23)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-24)    flow = [\n[](https://docs.dria.co/how-to/functions#__codelineno-6-25)        Edge(source=\"get_prices\", target=\"_end\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-26)    ]\n[](https://docs.dria.co/how-to/functions#__codelineno-6-27)    builder.flow(flow)\n[](https://docs.dria.co/how-to/functions#__codelineno-6-28)    builder.set_return_value(\"prices\")\n[](https://docs.dria.co/how-to/functions#__codelineno-6-29)    return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/functions"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Structured Outputs - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/structured_outputs\n\nMarkdown Content:\nStructured outputs best explained in OpenAI's [blog post](https://platform.openai.com/docs/guides/structured-outputs):\n\n> Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema, so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value.\n\nDria Network supports structured outputs for providers including `OpenAI`, `Gemini` and `Ollama`. However, structured outputs are only supported by models that are capable of [function](https://docs.dria.co/functions/) calling.\n\nEnabling structured outputs is simple. You just need to provide a schema to the `WorkflowBuilder` instance, rest will be handled by Dria SDK.\n\nFrom the previous example in [singleton](https://docs.dria.co/singletons/), you can directly attach the OutputSchema to your workflow for structured output.\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-1) builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-2)        path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-3)        operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-4)        schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-5)        outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-0-6)    )\n```\n\nFull workflow method:\n\n```\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-1)    def workflow(self) -> Workflow:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-2)\"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-3)        Generate a Task to determine if the predicted answer is contextually and semantically correct.\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-4)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-5)        Returns:\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-6)            Workflow: The constructed workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-7)        \"\"\"\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-8)        # Initialize the workflow with variables\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-9)        builder = WorkflowBuilder(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-10)            prediction=self.prediction, correct_answer=self.correct_answer\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-11)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-12)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-13)        # Add a generative step using the prompt\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-14)        builder.generative_step(\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-15)            path=get_abs_path(\"validate.md\"),\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-16)            operator=Operator.GENERATION,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-17)            schema=self.OutputSchema,\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-18)            outputs=[Write.new(\"validation_result\")],\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-19)        )\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-20)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-21)        # Define the flow of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-22)        flow = [Edge(source=\"0\", target=\"_end\")]\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-23)        builder.flow(flow)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-24)\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-25)        # Set the return value of the workflow\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-26)        builder.set_return_value(\"validation_result\")\n[](https://docs.dria.co/how-to/structured_outputs#__codelineno-1-27)        return builder.build()\n```\n",
    "url": "https://docs.dria.co/how-to/structured_outputs"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Prompts - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/prompters\n\nMarkdown Content:\nPrompt[\u00b6](https://docs.dria.co/how-to/prompters#prompt \"Permanent link\")\n------------------------------------------------------------------------\n\nThe `Prompt` class is a simple singleton template that allows you to create prompts with schema validation using Pydantic models. It provides a straightforward way to generate structured outputs from language models.\n\nBasic Usage[\u00b6](https://docs.dria.co/how-to/prompters#basic-usage \"Permanent link\")\n----------------------------------------------------------------------------------\n\n### 1\\. Import Required Dependencies[\u00b6](https://docs.dria.co/how-to/prompters#1-import-required-dependencies \"Permanent link\")\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-1)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-0-2)from pydantic import BaseModel, Field\n```\n\n### 2\\. Define Output Schema[\u00b6](https://docs.dria.co/how-to/prompters#2-define-output-schema \"Permanent link\")\n\nCreate a Pydantic model that defines the structure of your expected output:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-1)class OutputSchema(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-2)    field1: str = Field(..., title=\"Field1\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-1-3)    field2: str = Field(..., title=\"Field2\")\n```\n\n### 3\\. Create Dataset[\u00b6](https://docs.dria.co/how-to/prompters#3-create-dataset \"Permanent link\")\n\nInitialize a DriaDataset with your schema:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-1)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-2)    name=\"my_dataset\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-3)    description=\"Dataset description\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-4)    schema=OutputSchema\n[](https://docs.dria.co/how-to/prompters#__codelineno-2-5))\n```\n\n### 4\\. Initialize Prompt[\u00b6](https://docs.dria.co/how-to/prompters#4-initialize-prompt \"Permanent link\")\n\nCreate a Prompt instance with your prompt text and schema. Add variables in the prompt text using double curly braces `{{}}`:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-3-1)prompter = Prompt(prompt=\"Do something with {{field1}}\", schema=OutputSchema)\n```\n\n### 5\\. Generate Data[\u00b6](https://docs.dria.co/how-to/prompters#5-generate-data \"Permanent link\")\n\nUse DatasetGenerator to execute the prompt:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-1)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-2)instructions = [{\"field1\": \"value1\"}, {\"field2\": \"value2\"}]\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-3)\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-4)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-5)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-6)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-7)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-8)        models=Model.LLAMA_3_1_8B_OR\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-9)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-4-10))\n```\n\nComplete Example[\u00b6](https://docs.dria.co/how-to/prompters#complete-example \"Permanent link\")\n--------------------------------------------------------------------------------------------\n\nHere's a complete example that generates tweets about different topics:\n\n```\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-1)import asyncio\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-2)from dria import Prompt, DatasetGenerator, DriaDataset, Model\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-3)from pydantic import BaseModel, Field\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-4)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-5)# Define output schema\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-6)class Tweet(BaseModel):\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-7)    topic: str = Field(..., title=\"Topic\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-8)    tweet: str = Field(..., title=\"tweet\")\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-9)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-10)# Create dataset\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-11)dataset = DriaDataset(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-12)    name=\"tweet_test\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-13)    description=\"A dataset of tweets!\",\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-14)    schema=Tweet\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-15))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-16)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-17)# Define instructions\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-18)instructions = [\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-19)    {\"topic\": \"BadBadNotGood\"},\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-20)    {\"topic\": \"Decentralized synthetic data\"}\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-21)]\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-22)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-23)# Create prompt\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-24)prompter = Prompt(prompt=\"Write a tweet about {{topic}}\", schema=Tweet)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-25)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-26)# Initialize generator\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-27)generator = DatasetGenerator(dataset=dataset)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-28)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-29)# Generate data\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-30)asyncio.run(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-31)    generator.generate(\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-32)        instructions=instructions,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-33)        singletons=prompter,\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-34)        models=Model.GPT4O\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-35)    )\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-36))\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-37)\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-38)# View results\n[](https://docs.dria.co/how-to/prompters#__codelineno-5-39)dataset.to_pandas()\n```\n\n`Prompt` is useful for straightforward tasks. For more complex tasks, consider creating a custom singleton using the `SingletonTemplate` class.\n",
    "url": "https://docs.dria.co/how-to/prompters"
  },
  {
    "persona_bio": "At 45, Raymond is a low-income male patient battling Condition B, whose deep dissatisfaction with Provider C stems from their subpar facilities, despite the burdensome cost of $7,559 for his treatment and the hope of improvement through a scheduled follow-up, experiences he's candidly shared in a comprehensive 15-minute survey, providing crucial, rich data ideal for the advanced synthetic data modeling by Dria.",
    "context": "Title: Batches - Dria Docs\n\nURL Source: https://docs.dria.co/how-to/batches\n\nMarkdown Content:\nBatches (ParallelSingletonExecutor) is a way to run multiple instructions in parallel. This is useful when you have a large number of instructions to run and you want to run them concurrently.\n\nTo use Batches, you need to create a `Dria` client, a `Singleton` task, and a `ParallelSingletonExecutor` object.\n\n```\n[](https://docs.dria.co/how-to/batches#__codelineno-0-1)from dria.client import Dria\n[](https://docs.dria.co/how-to/batches#__codelineno-0-2)from dria.factory import Simple\n[](https://docs.dria.co/how-to/batches#__codelineno-0-3)from dria.models import Model\n[](https://docs.dria.co/how-to/batches#__codelineno-0-4)from dria.batches import ParallelSingletonExecutor\n[](https://docs.dria.co/how-to/batches#__codelineno-0-5)import asyncio\n[](https://docs.dria.co/how-to/batches#__codelineno-0-6)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-7)async def batch():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-8)    dria_client = Dria()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-9)    singleton = Simple()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-10)    executor = ParallelSingletonExecutor(dria_client, singleton)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-11)    executor.set_models([Model.QWEN2_5_7B_OR, Model.LLAMA_3_1_8B_OR,\n[](https://docs.dria.co/how-to/batches#__codelineno-0-12)                         Model.QWEN2_5_7B_FP16, Model.LLAMA3_2_3B, Model.LLAMA3_2_1B])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-13)    executor.load_instructions([{ \"prompt\": \"What is the capital of France?\" }, { \"prompt\": \"What is the capital of Germany?\" }])\n[](https://docs.dria.co/how-to/batches#__codelineno-0-14)    return await executor.run()\n[](https://docs.dria.co/how-to/batches#__codelineno-0-15)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-16)def main():\n[](https://docs.dria.co/how-to/batches#__codelineno-0-17)    results = asyncio.run(batch())\n[](https://docs.dria.co/how-to/batches#__codelineno-0-18)    print(results)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-19)\n[](https://docs.dria.co/how-to/batches#__codelineno-0-20)if __name__ == \"__main__\":\n[](https://docs.dria.co/how-to/batches#__codelineno-0-21)    main()\n```\n\nInstructions are passed to the `executor` using the `load_instructions` method. Format of the instructions should match the input format of the `Singleton` task.\n",
    "url": "https://docs.dria.co/how-to/batches"
  }
]